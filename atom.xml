<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>踏浪 - 前端技术分享</title>
  
  <subtitle>所谓天才，不过是每一天的积累成才</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.lyt007.cn/"/>
  <updated>2020-04-23T08:44:12.840Z</updated>
  <id>https://blog.lyt007.cn/</id>
  
  <author>
    <name>踏浪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react+antd+webpack4 构建项目框架</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/react-antd-webpack4%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6.html"/>
    <id>https://blog.lyt007.cn/技术/react-antd-webpack4构建项目框架.html</id>
    <published>2020-04-15T07:02:37.000Z</published>
    <updated>2020-04-23T08:44:12.840Z</updated>
    
    <content type="html"><![CDATA[<p>入职新公司，要求自己搭建一个react的开发模板，而不是使用现有的 <code>create-react-app</code> 。所以自己搭建了一个</p><p>涉及到的功能：</p><ol><li>react, react-dom, react-router</li><li>ESlint + Aribnb</li><li>prettier</li><li>具体使用还是不使用状态管理库（redux or mobx），视情况而定，不复杂使用 React.crateContext() </li><li>使用less不使用scss</li><li>热更新，不是热重载</li></ol><p>其他的功能自己适适当配置</p><p>项目地址：<a href="https://github.com/tal007/react-antd-webpack" target="_blank" rel="noopener">https://github.com/tal007/react-antd-webpack</a></p><h2 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h2><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><p>处理js，jsx，ts，tsx语法</p><h3 id="style-loader，css-loader，less-loader，postcss-loader"><a href="#style-loader，css-loader，less-loader，postcss-loader" class="headerlink" title="style-loader，css-loader，less-loader，postcss-loader"></a>style-loader，css-loader，less-loader，postcss-loader</h3><p>处理css</p><p>style-loader：添加到js中，这样修改才会热更新，在开发环境中需要加上，生产环境如果使用<code>mini-css-extract-plugin</code>抽离css，那么不要加上style-loader</p><p>注意loader使用顺序</p><p>使用less-loader需要同时安装less库</p><p>postcss-loader处理css中的一些问题，压缩等，同时可以使用postcss插件，例如<code>postcss-flexbugs-fixes</code>, <code>postcss-cssnext</code>, <code>cssnano</code> 等。</p><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><p>处理文件（字体，图片，影视频等）并重新命名</p><h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p>处理图片，设置路径以及base64图片压缩</p><h2 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h2><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><p>设置html模板以及输出路径等</p><h3 id="webpack-ProvidePlugin"><a href="#webpack-ProvidePlugin" class="headerlink" title="webpack.ProvidePlugin"></a>webpack.ProvidePlugin</h3><p>设置webpack全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">  <span class="comment">// 这样就不用每个文件都引用react了，但是需要在eslintrc中配置eslint语法检测</span></span><br><span class="line">  React: <span class="string">'react'</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h3 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h3><p>css代码抽离，详见<code>config/webpack.prod.js</code></p><h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h3><p>清除之前打包的代码</p><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><p><code>webpack.HotModuleReplacementPlugin</code> 与 <code>webpack.NamedModulesPlugin()</code>。前者使用热更新，后者在控制台展示热更新名字。</p><p>热更新需要同时使用 <code>react-hot-loader</code>。</p><blockquote><p>npm i –save-dev react-hot-loader</p></blockquote><p>使用详见： <code>src/App.jsx</code>。还需要在 <code>.babelrc</code> 中配置 plugins</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>ESlint + Prettier</p><blockquote><p>npm i –save-dev eslint</p></blockquote><h3 id="配合VSCode使用"><a href="#配合VSCode使用" class="headerlink" title="配合VSCode使用"></a>配合VSCode使用</h3><p>VSCode 安装插件</p><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier - Code formatter</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint</a></p></li></ul><p>.eslintrc.js中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"plugins"</span>: [<span class="string">"prettier"</span>],</span><br><span class="line"><span class="string">"rules"</span>: &#123;</span><br><span class="line">  <span class="string">"prettier/prettier"</span>: <span class="string">"error"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 .ptettierrc.js 配置如下，可自行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// configs see https://prettier.io/docs/en/options.html</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  trailingComma: <span class="string">'es5'</span>,</span><br><span class="line">  singleQuote: <span class="literal">true</span>,</span><br><span class="line">  tabWidth: <span class="number">2</span>,</span><br><span class="line">  semi: <span class="literal">true</span>,</span><br><span class="line">  bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">  arrowParens: <span class="string">'always'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在settings.json 中添加如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// jsx自动修复有问题，取消js的format</span><br><span class="line">"editor.formatOnSave": false,</span><br><span class="line">// Enable/disable default JavaScript formatter (For Prettier)</span><br><span class="line">"javascript.format.enable": false,</span><br><span class="line">"prettier.singleQuote": true,</span><br><span class="line">// 点击保存时，根据 eslint 规则自定修复，同时集成 prettier 到 eslint 中</span><br><span class="line">"prettier.eslintIntegration": true,</span><br><span class="line">// 保存自动修复</span><br><span class="line">"editor.codeActionsOnSave": &#123;</span><br><span class="line">  "source.fixAll.eslint": true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="使用-BrowserRouter-刷新-404"><a href="#使用-BrowserRouter-刷新-404" class="headerlink" title="使用 BrowserRouter 刷新 404"></a>使用 BrowserRouter 刷新 404</h3><p>在 devServer 中 添加 <code>historyApiFallback: true</code></p><h3 id="使用-webpack-alias-的时候路径提示"><a href="#使用-webpack-alias-的时候路径提示" class="headerlink" title="使用 webpack alias 的时候路径提示"></a>使用 webpack alias 的时候路径提示</h3><p>根目录添加 <code>jsconfig.json</code> 文件，与 alias 中的对应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">      <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"baseUrl"</span>: <span class="string">"./"</span>,</span><br><span class="line">      <span class="attr">"paths"</span>: &#123;</span><br><span class="line">        <span class="attr">"@/*"</span>: [<span class="string">"./src"</span>],</span><br><span class="line">        <span class="attr">"@comp/*"</span>: [<span class="string">"./src/components"</span>],</span><br><span class="line">        <span class="attr">"@img/*"</span>: [<span class="string">"./src/img"</span>],</span><br><span class="line">        <span class="attr">"@styl/*"</span>: [<span class="string">"./src/style"</span>],</span><br><span class="line">        <span class="attr">"@pages/*"</span>: [<span class="string">"./src/pages"</span>],</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>, <span class="string">"dist"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用git-commit-规范"><a href="#使用git-commit-规范" class="headerlink" title="使用git commit 规范"></a>使用git commit 规范</h2><p>git-commit规范可以查看<a href="https://juejin.im/post/5afc5242f265da0b7f44bee4" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a></p><p>项目地址：<a href="https://github.com/tal007/react-antd-webpack" target="_blank" rel="noopener">https://github.com/tal007/react-antd-webpack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;入职新公司，要求自己搭建一个react的开发模板，而不是使用现有的 &lt;code&gt;create-react-app&lt;/code&gt; 。所以自己搭建了一个&lt;/p&gt;
&lt;p&gt;涉及到的功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;react, react-dom, react-router&lt;/li
      
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>使用nextjs进行react项目的服务端渲染</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E4%BD%BF%E7%94%A8nextjs%E8%BF%9B%E8%A1%8Creact%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93.html"/>
    <id>https://blog.lyt007.cn/技术/使用nextjs进行react项目的服务端渲染.html</id>
    <published>2020-03-24T01:42:40.000Z</published>
    <updated>2020-04-23T09:05:46.956Z</updated>
    
    <content type="html"><![CDATA[<p>react作为前端三大框架之一，用的人自然是很多的。我也是一直使用react进行项目的开发，不管是移动端还是PC端，不管是大项目还是小项目，大部分都是使用的是react进行开发的。当然，其他的框架（vue等）也是使用的。当然，客户端渲染的弊端也是很明显的，<code>首页加载缓慢</code>，<code>网站SEO问题</code>等等。</p><blockquote><p>如果功能不是太复杂又要SEO，可以尝试预渲染的模式<a href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/react%E9%A1%B9%E7%9B%AE%E9%A2%84%E6%B8%B2%E6%9F%93%E5%BC%80%E5%8F%91.html">react项目预渲染开发</a></p></blockquote><p>React服务端渲染可以解决这个问题。以前在没有<a href="https://nextjs.org/" target="_blank" rel="noopener">nextjs</a>的时候，我们通常都是使用react提供的<code>renderToString</code>方法在结合express等来实现的服务端渲染。当然也可以实现。但是正所谓专业的人做专业的事。自己搭建一个服务端渲染先不说麻烦，自己要踩得坑也是很多的。所以，如果是要上正式环境，在自己构建不熟悉的情况下，使用服务端渲染框架也是很不错的。</p><p>目前用的比较多的就是<a href="https://nextjs.org/" target="_blank" rel="noopener">nextjs</a>。</p><p>关于nextjs的使用在<a href="https://nextjs.org/" target="_blank" rel="noopener">官网</a>上面说的很明确。可以自己去看看。这里我记录一下实际使用的时候遇到的一些问题。</p><h2 id="1-项目部署。"><a href="#1-项目部署。" class="headerlink" title="1.项目部署。"></a>1.项目部署。</h2><p>构建自己的项目后，并成功添加页面，在本地跑起来都是没有问题的。这时候就需要部署到服务端了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hello-next"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"next"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"next start"</span>,</span><br><span class="line">    <span class="attr">"export"</span>: <span class="string">"npm run build &amp;&amp; next export"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.19.2"</span>,</span><br><span class="line">    <span class="attr">"next"</span>: <span class="string">"^9.2.2"</span>,</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.13.0"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.13.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>yarn build</code>以后会生成一个<code>.next</code>目录的文件夹，里面就是我们需要部署的内容。然后使用<code>yarn start</code>就可以跑起来了。可以在本地试试。</p><blockquote><p>执行 <code>yarn start</code> 之前必须先执行 <code>yarn build</code>。因为 start 需要的就是 <code>.next</code> 文件夹里面的东西。</p></blockquote><p>所以，我们在服务器上面只需要上传 <code>.next</code> 和 <code>package.json</code> 就可以了。</p><p>这样操作以后，就可以在服务器3000端口访问了。但是，如果一关闭命令窗口，那么久GG了，无法访问。</p><h2 id="使用pm2托管node项目"><a href="#使用pm2托管node项目" class="headerlink" title="使用pm2托管node项目"></a>使用pm2托管node项目</h2><p>在服务器上面安装pm2 然后使用 <code>pm2 start --name=&#39;nextjs&#39; npm -- start</code> 运行项目。这样就可以解决上面的问题。</p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20200324103128.png" alt="pm2启动成功"></p><p>启动成功，这样就可以在对应的端口查看了 <a href="http://118.24.6.33:3000/" target="_blank" rel="noopener">http://118.24.6.33:3000/</a></p><p>关于pm2的一系列操作可以查看<a href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/PM2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html">PM2常用命令</a></p><h2 id="路由页面与路由需要对应"><a href="#路由页面与路由需要对应" class="headerlink" title="路由页面与路由需要对应"></a>路由页面与路由需要对应</h2><p>开始学习的时候，我创建组件也是按照传统的创建组件（首字母大写）的方式创建的，而路由跳转又是小写的，本地一切正常，但是在部署后，就出问题了。找不到对应的小写的js的文件。这就是问题所在。</p><p>两种解决：</p><ol><li>使用小写，或者说路由与文件名字一样</li><li>使用自定义路由而不是用默认的路由</li></ol><h2 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h2><p>一直使用域名 + 端口访问是很愚蠢的。所以我们需要绑定域名。在你的域名里面添加一个二级域名解析，我这里是<code>nextjs.lyt007.cn</code>。</p><p>然后需要配置服务器上的nginx。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 定义了一个名字</span><br><span class="line">upstream nodenext &#123;</span><br><span class="line">    server 127.0.0.1:3000; #next项目 监听端口</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name nextjs.lyt007.cn;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;  </span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy true;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">        # 这里使用这个名字反向代理</span><br><span class="line">        proxy_pass http://nodenext; #反向代理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用nextjs进行react项目的服务端渲染
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react" scheme="https://blog.lyt007.cn/tags/react/"/>
    
      <category term="服务端渲染" scheme="https://blog.lyt007.cn/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-从使用new到手写new</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/JavaScript-%E4%BB%8E%E4%BD%BF%E7%94%A8new%E5%88%B0%E6%89%8B%E5%86%99new.html"/>
    <id>https://blog.lyt007.cn/技术/JavaScript-从使用new到手写new.html</id>
    <published>2020-03-21T07:10:16.000Z</published>
    <updated>2020-04-13T03:13:34.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><blockquote><p>new运算符创建一个用户定义的对象类型的实例或者具有构造函数的内置对象类型之一</p></blockquote><p>在手写 <code>new</code> 之前，我们来看看 new 实现了那些功能。</p><p>Demo：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 狗的类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span> (<span class="params">name, age</span>) </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.habit = <span class="string">"Ball"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dog.prototype.weight = <span class="number">50</span>;</span><br><span class="line">Dog.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I am"</span> + <span class="keyword">this</span>.name + <span class="string">", i am run..."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一条白色的狗</span></span><br><span class="line"><span class="keyword">var</span> whiteDog = <span class="keyword">new</span> Dog(<span class="string">'xiao bai'</span>, <span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(whiteDog.name); <span class="comment">// xiao bai</span></span><br><span class="line"><span class="built_in">console</span>.log(whiteDog.age); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(whiteDog.weight); <span class="comment">// 50</span></span><br><span class="line">whiteDog.run(); <span class="comment">// I am xiao bai, i am run...</span></span><br></pre></td></tr></table></figure><p>从上面的Demo中可以看出来，实例 whiteDog 可以：</p><ol><li>访问到 Dog 构造函数中的属性；</li><li>访问到 Dog.prototype 中的属性；</li></ol><p>所以。我们可以简单的实现一个 new。</p><p><strong>因为new是关键字，我们无法覆盖，所以我们用new2来表示我们的new</strong></p><p>使用的时候呢如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">...</span>)</span>&#123;...&#125;;</span><br><span class="line"><span class="comment">// 使用new</span></span><br><span class="line"><span class="keyword">var</span> whiteDog = <span class="keyword">new</span> Dog(...);</span><br><span class="line"><span class="comment">// 使用new2</span></span><br><span class="line"><span class="keyword">var</span> whiteDog = new2(Dog,...);</span><br></pre></td></tr></table></figure><h2 id="初步实现"><a href="#初步实现" class="headerlink" title="初步实现"></a>初步实现</h2><p>分析：</p><p>因为 new 的结果会返回一个对象，所以在模拟实现它的时候，我们也要建立一个新的对象，假设这个对象叫 obj。因为 obj 会具有构造函数（这里指Dog）里面的属性。我们使用 Dog.allpy(obj, arguments) 来给 obj 添加新的属性。</p><p>补充两点：</p><ol><li><code>__proto__</code> 和 <code>constructor</code> 属性是对象所独有的；</li><li><code>prototype</code> 属性是函数所独有的。</li></ol><p>第一版代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line">  Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实上面的代码已经可以生效了。不信你可以复制下面的代码运行一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 狗的类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span> (<span class="params">name, age</span>) </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.habit = <span class="string">"Ball"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dog.prototype.weight = <span class="number">50</span>;</span><br><span class="line">Dog.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I am"</span> + <span class="keyword">this</span>.name + <span class="string">", i am run..."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一条白色的狗的实例</span></span><br><span class="line"><span class="keyword">var</span> whiteDog = <span class="keyword">new</span> Dog(<span class="string">'xiao bai'</span>, <span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(whiteDog.name); // xiao bai</span></span><br><span class="line"><span class="comment">// console.log(whiteDog.age); // 2</span></span><br><span class="line"><span class="comment">// console.log(whiteDog.weight); // 50</span></span><br><span class="line"><span class="comment">// whiteDog.run(); // I am xiao bai, i am run...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 这里通过定制传参规则，获取第一个参数，即我们需要继承的对象。</span></span><br><span class="line">  <span class="comment">// 同时因为使用的数组的 shift 方法，最后的 arguments 是少了第一项的</span></span><br><span class="line">  <span class="keyword">var</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line">  Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blackDog = new2(Dog, <span class="string">"xiao hei"</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(blackDog.name); <span class="comment">// xiao hei</span></span><br></pre></td></tr></table></figure><p>但是有一个问题。</p><p>什么问题呢？那就是如果我的构造函数不是默认的返回值而是自己添加了一个返回值呢？</p><p>Demo2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.weight = <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    habit: <span class="string">'Games'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'Kevin'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog.name) <span class="comment">// Kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.habit) <span class="comment">// Games</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.weight) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.age) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在这个例子中，构造函数返回了一个对象，在实例 person 中只能访问返回的对象中的属性。</p><p>而且还要注意一点，在这里我们是返回了一个对象，假如我们只是返回一个 <code>基本类型</code> 的值呢？</p><p>Demo3:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.weight = <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Kevin"</span> <span class="comment">// 你可以试试其他基本类型，包括ES6中的 Symbol();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'Kevin'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog.name) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.habit) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.weight) <span class="comment">// 60</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.age) <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>结果完全颠倒过来，这次尽管有返回值，但是相当于没有返回值进行处理。</p><p>所以我们还需要判断返回的值是不是一个对象，如果是一个对象，我们就返回这个对象，如果没有，我们该返回什么就返回什么。</p><p>所以我们有了第二版的 new2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二版的代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;,</span><br><span class="line">    Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    obj.__proto__ = Constructor.prototype;</span><br><span class="line">    <span class="keyword">var</span> res= Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">'object'</span> ? res: obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      通过手写一个new函数彻底理解JavaScript中的new
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javaScript" scheme="https://blog.lyt007.cn/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>PM2常用命令</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/PM2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://blog.lyt007.cn/技术/PM2常用命令.html</id>
    <published>2020-03-11T06:42:09.000Z</published>
    <updated>2020-04-13T03:13:34.973Z</updated>
    
    <content type="html"><![CDATA[<p>pm2常用命令记录</p><p><code>pm2 start app.js</code> # 启动app.js应用程序</p><p><code>pm2 start app.js -i 4</code>        # cluster mode 模式启动4个app.js的应用实例 4个应用程序会自动进行负载均衡</p><p><code>pm2 start app.js --name=&quot;api&quot;</code> # 启动应用程序并命名为 “api”</p><p><code>pm2 start app.js --watch</code>      # 当文件变化时自动重启应用</p><p><code>pm2 start script.sh</code>          # 启动 bash 脚本</p><p><code>pm2 list</code>                      # 列表 PM2 启动的所有的应用程序</p><p><code>pm2 monit</code>                    # 显示每个应用程序的CPU和内存占用情况</p><p><code>pm2 show [app-name]</code>          # 显示应用程序的所有信息</p><p><code>pm2 logs</code>                      # 显示所有应用程序的日志</p><p><code>pm2 logs [app-name]</code>          # 显示指定应用程序的日志</p><p><code>pm2 flush</code>                       # 清空所有日志文件</p><p><code>pm2 stop all</code>                  # 停止所有的应用程序</p><p><code>pm2 stop 0</code>                    # 停止 id为 0的指定应用程序</p><p><code>pm2 restart all</code>              # 重启所有应用</p><p><code>pm2 reload all</code>               # 重启 cluster mode下的所有应用</p><p><code>pm2 gracefulReload all</code>        # Graceful reload all apps in cluster mode</p><p><code>pm2 delete all</code>                # 关闭并删除所有应用</p><p><code>pm2 delete 0</code>                  # 删除指定应用 id 0</p><p><code>pm2 scale api 10</code>              # 把名字叫api的应用扩展到10个实例</p><p><code>pm2 reset [app-name]</code>          # 重置重启数量</p><p><code>pm2 startup</code>                  # 创建开机自启动命令</p><p><code>pm2 save</code>                      # 保存当前应用列表</p><p><code>pm2 resurrect</code>                # 重新加载保存的应用列表</p><p><code>pm2 update</code>                    # Save processes, kill PM2 and restore processes</p><p><code>pm2 generate</code>                  # Generate a sample json configuration file</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><code>pm2 start npm -- start</code>        # pm2 启动 npm 命令。scripts中名字为 start</p><p>pm2文档地址：<a href="https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/" target="_blank" rel="noopener">https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/</a></p>]]></content>
    
    <summary type="html">
    
      pm2 常用命令
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="pm2" scheme="https://blog.lyt007.cn/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>移动端UI框架</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AFUI%E6%A1%86%E6%9E%B6.html"/>
    <id>https://blog.lyt007.cn/技术/移动端UI框架.html</id>
    <published>2020-03-02T01:32:10.000Z</published>
    <updated>2020-04-13T03:13:34.974Z</updated>
    
    <content type="html"><![CDATA[<p>UI框架作为前端一门必须要了解并且熟练掌握的一门技术，关于目前不同的js框架对应的不同的框架还是有必要说说。</p><p>关于PC端的UI框架是在是太多了。</p><ul><li><p>react：目前常用的得数蚂蚁金服出的<a href="https://ant.design/" target="_blank" rel="noopener">Ant Design</a>了。而最新刚刚发布了4.0版本。移除了对IE9/10的支持，同时也支持 React Hook。当然还有其他的</p></li><li><p>vue：目前常用的算得上是饿了么出的ElementUI了。当然还有其他的</p></li></ul><p>移动端的UI框架也挺多。不过这是针对于VUE来说的。</p><ul><li><a href="https://youzan.github.io/vant/#/zh-CN/" target="_blank" rel="noopener">Vant UI</a>。有赞公司出的一套电商类的UI框架，如果是做移动端电商的，想必这款UI框架用的是得心应手了吧</li><li><a href="https://muse-ui.org/#/zh-CN" target="_blank" rel="noopener">Muse UI</a>。社区人员维护的一套UI框架。</li><li><a href="https://didi.github.io/mand-mobile/#/zh-CN/home" target="_blank" rel="noopener">Mand Mobile</a>。也是社区活跃挺高的一款UI。同时还包含了<a href="https://didi.github.io/mand-mobile-rn/?path=/story/mand-mobile-rn--%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5" target="_blank" rel="noopener">React Native的UI</a>。</li></ul><p>VUE的可以说有很多，但也有很多都不再维护了。比如滴滴公司的Cube UI，京东的Nut UI等等。</p><p>再来看看React，相对来说就很少了。我一直都是在使用react开发网站，不管是PC还是H5的。PC的当然是首选了 Ant Design，但是H5端的ant是真的没有PC的好用。所以最开始在开发移动端的时候都是自己写的样式，交互体验也比较差。后面觉得是在是不行了。就到处找，找了一款国外的UI框架 <a href="https://framework7.io/" target="_blank" rel="noopener">Framework7</a>。</p><p>Framework7其实最开始是专注于 WebApp 开发的，而且在IOS的上面的体验几乎与原生媲美，安卓上性能就差很多了。不多最近我在使用这个框架的时候，其中的大部分功能还是挺不错的，在使用React开发的时候可以选择这款UI框架。不过如果是做H5，那最好就不要使用UI框架自带的路由了，真的太差了。</p><p>如果你有其他的react的UI框架推荐，欢迎留言。</p>]]></content>
    
    <summary type="html">
    
      移动端UI框架推荐
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="移动端" scheme="https://blog.lyt007.cn/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="UI" scheme="https://blog.lyt007.cn/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>不打算在使用BootCND</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E4%B8%8D%E6%89%93%E7%AE%97%E5%9C%A8%E4%BD%BF%E7%94%A8BootCND.html"/>
    <id>https://blog.lyt007.cn/技术/不打算在使用BootCND.html</id>
    <published>2020-02-24T02:13:15.000Z</published>
    <updated>2020-04-13T03:13:34.974Z</updated>
    
    <content type="html"><![CDATA[<p>今天（2020年02月24日）上班来到公司，一如既往的开机准备开开心心的敲代码了。结果，日了狗了。网站报错了。</p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/E8EF11D3-D0D4-4E6F-8EEF-2D76D59784B2.png" alt></p><p>结果。就是因为使用了 <a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">BootCND</a> 导致的网站无法访问。</p><p>出问题了。可能会亏损几个亿吧。当然，几个亿是不可能的。</p><p>所以。这件事情以后，打算不再使用CDN了。<strong>还是老老实实的放本地吧。</strong></p><p>或者 <a href="cdnjs.com">https://cdnjs.com/</a> 可能也是一个不错的选择。</p><p>记在这里，就当给自己一个教训。</p>]]></content>
    
    <summary type="html">
    
      关于CND那些事
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CDN" scheme="https://blog.lyt007.cn/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>React Hook</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/React-Hook.html"/>
    <id>https://blog.lyt007.cn/技术/React-Hook.html</id>
    <published>2020-01-16T09:25:27.000Z</published>
    <updated>2020-04-22T03:28:52.454Z</updated>
    
    <content type="html"><![CDATA[<p>React Hook 在 <code>react 16.8及以后的版本</code>中才会有</p><h2 id="React-Hook-解决的问题"><a href="#React-Hook-解决的问题" class="headerlink" title="React Hook 解决的问题"></a>React Hook 解决的问题</h2><h3 id="1-组件之间复用状态逻辑"><a href="#1-组件之间复用状态逻辑" class="headerlink" title="1. 组件之间复用状态逻辑"></a>1. 组件之间复用状态逻辑</h3><h3 id="2-减少组件的复杂程度"><a href="#2-减少组件的复杂程度" class="headerlink" title="2. 减少组件的复杂程度"></a>2. 减少组件的复杂程度</h3><p>在传统的 class 中，会使用 componentDidMount 和 componentDidUpdate 获取数据。同时 componentDidMount 中也会处理一些其他的事务，例如事件监听，定时器等等。而后还需要在 componentWillUnmount 中取消。万一忘记其中某一个部分或者处理的时间过多，很可能导致一些可怕的bug。</p><h3 id="3-关于-class-类与函数组件-this-的问题"><a href="#3-关于-class-类与函数组件-this-的问题" class="headerlink" title="3. 关于 class 类与函数组件 this 的问题"></a>3. 关于 class 类与函数组件 this 的问题</h3><p>对于一部分人来说，理解 class 中的 this 会比理解函数组件中的 this 更加困难，而且增加了学习成本。<strong>但是，react 中并不会移除 class 这种方法</strong></p><p><a href="https://www.youtube.com/watch?time_continue=356&amp;v=dpw9EHDh2bM&amp;feature=emb_logo" target="_blank" rel="noopener">YouTube上面的视频</a></p><h2 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h2><p>传统的 React 组件的 state 都是这样的，创建一个 state 与更新（this.setState）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;_</span> =&gt;</span> this.setState(&#123;count: this.state.count++&#125;)&#125;&gt;&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 React Hook 后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;_</span> =&gt;</span> setCount(count++)&#125;&gt;&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到。使用 Hook 后的代码简洁了很多。但是，使用 <code>useState</code> 不会把新的 state 和旧的 state 进行合并。</p><p>上面，我们只是用了一个 count。但是通常一个组件都不会只有一个 state 的，这时候可以多次使用 <code>useState</code>。</p><p>同时，定义 state 的时候定义在一个数组里面，可以猜到， useState 返回的不是一个不同的数字或者字符串，而是一个对象（数组）。这里这样定义，使用了 ES6 中的<a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="noopener">解构赋值</a></p><h2 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h2><p><code>useState</code> 其实不难理解，唯一需要注意的就是 <code>this.setState</code> 是修改后的 state 与之前的 state 对比合并，而采用 <code>useState</code> 则是直接替换。</p><p>作为使用过一段时间的 React Hook 的程序员，个人认为 <code>Effect Hook</code> 才需要更多的理解。</p><p>React官方文档中这样定义的</p><blockquote><p>你之前可能已经在 React 组件中执行过数据获取、订阅或者手动修改过 DOM。我们统一把这些操作称为“副作用”，或者简称为“作用”。<br><code>useEffect</code> 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途，只不过被合并成了一个 API。</p></blockquote><p>所以，我们使用 Hook 后，数据获取、订阅或者手动修改过 DOM等都需要在 <code>useEffect</code> 中进行了。</p><blockquote><p>不要以为 <code>useEffect</code> 和 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 一样只能使用一次，他与 <code>useState</code> 一样，可以多次使用。</p></blockquote><p>默认情况下，React 会在每次渲染后调用副作用函数(<code>useEffect</code>) —— 包括第一次渲染的时候。所以，在 <code>useEffect</code> 函数中可以直接使用 props 和 state</p><p><code>useEffect</code> 接收两个参数。第一个参数是一个函数，第一个参数相当于 <code>componentDidMount</code> 和 <code>componentDidUpdate</code>，第一个参数可以有一个返回值（一般就是一个函数，我们将之称为<em>清除函数</em>），相当于与 <code>componentWillUnmount</code>。这样一说，你可能就理解了。再来举个例子，更形象的说明一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> doSomething(), <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.timer) clearInterval(<span class="keyword">this</span>.timer)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的是传统的方式，添加以及移除定时器的操作。因为需要在 <code>componentWillUnmount</code> 中进行判断，有时候（大部分时候）可能都会遗忘。</p><p>再来看看使用 <code>useEffect</code> 的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> doSomething(), <span class="number">1000</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// return 一个函数，将会在组件将要卸载的时候调用 相当于 componentWillUnmount</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(timer)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出，使用 <code>useEffect</code> 不单单是代码更简洁，同时使我们的代码逻辑看起来更直观。设置定时器与清除定时器是放在一个API里面的，代码的耦合更高。更能体现这是一个整体，也避免了遗忘。</p><p><strong>为什么要在 effect 中返回一个函数？</strong> 这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。</p><p><strong>React 何时清除 effect？</strong> React 会在组件卸载的时候执行清除操作。正如之前学到的，effect 在每次渲染的时候都会执行。这就是为什么 React 会在执行当前 effect 之前对上一个 effect 进行清除。</p><p>如果不涉及到异步，订阅等操作，可以不用返回清除函数</p><p>上面只是 <code>useEffect</code> 的一个简单的事例，它的功能不止于此。因为之前还说过，处理数据请求也是在里面处理的。那么怎么使用呢</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do ajax request</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只是上面那样写，会有一个严重的问题。之前说过， <code>useEffect</code> 是会在<strong>DOM初次加载完成以及DOM更新完成的时候调用</strong>，所以上面的请求会在每一次DOM更新的时候再次执行，而如果请求返回的结果会使DOM更新，那么，这就是一个无限循环的过程了。</p><p>那么怎么处理这个副作用呢？这时候就需要 <code>useEffect</code> 的第二个参数了。一般是一个数组</p><p>如果两次需要更新的数据没有变化，只需要在第二个参数（数组）中添加对应的变量，例如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// 仅在 count 更改时更新</span></span><br></pre></td></tr></table></figure></p><p>但是如果是上面的处理 <code>ajax request</code> 的 effect 。只需要传递一个空数组即可。这样，这个 effect 只会执行一次。</p><p><em>React 会对数组中的数据进行更新前后数据的对比，如果没有变化，那么则不更新</em></p><p>这个方法对于有清除函数的 effect 同样适用。</p><blockquote><p>React官网中说到：未来版本，可能会在构建时自动添加第二个参数。期待他的到来，这将大大减少可能出现的bug。</p></blockquote><h2 id="其他-Hook"><a href="#其他-Hook" class="headerlink" title="其他 Hook"></a>其他 Hook</h2><p>除了 <code>useState</code> 和 <code>useEffect</code> 两个常用的 Hook， 还有一些其他的 Hook， 这些可能用的不多。</p><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = useContext(MyContext);</span><br></pre></td></tr></table></figure><p>这个 Hook 用于连接 React 上下文。使用过 <code>React.createContext</code> 的老铁应该知道，这是创建一个 React 上下文</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Context = React.createContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上层组件</span></span><br><span class="line">&lt;Context.Provider&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 消费这个 Context 的组件</span></span><br><span class="line">&lt;Context.Consumer&gt;&lt;/Context.Consumer&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>useContext</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Context = React.createContext;</span><br><span class="line"></span><br><span class="line">useContext(Context)</span><br></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> themes = &#123;</span><br><span class="line">  light: &#123;</span><br><span class="line">    foreground: <span class="string">"#000000"</span>,</span><br><span class="line">    background: <span class="string">"#eeeeee"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  dark: &#123;</span><br><span class="line">    foreground: <span class="string">"#ffffff"</span>,</span><br><span class="line">    background: <span class="string">"#222222"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(themes.light);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ThemeContext.Provider value=&#123;themes.dark&#125;&gt;</span><br><span class="line">      &lt;Toolbar /&gt;</span><br><span class="line">    &lt;<span class="regexp">/ThemeContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Toolbar(props) &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ThemedButton /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function ThemedButton() &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 通过 useContext 使用 React.createContext(themes.light) 创建的 Context</span></span><br><span class="line"><span class="regexp">  const theme = useContext(ThemeContext);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;button style=&#123;&#123; background: theme.background, color: theme.foreground &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">      I am styled by theme context!</span></span><br><span class="line"><span class="regexp">    &lt;/</span>button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg, init);</span><br></pre></td></tr></table></figure><p><code>useState</code> 的替代方案。它接收一个形如 (state, action) =&gt; newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法。（如果你熟悉 Redux 的话，就已经知道它如何工作了。)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count - <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'decrement'</span>&#125;)&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'increment'</span>&#125;)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>既然作用类似于 Redux， 那么可以用这个取代 Redux 么？答案是可以的，不过需要结合 <code>useContext</code> 来使用。掘金上面有码友给出了一个例子<a href="https://juejin.im/post/5ceb37c851882520724c7504" target="_blank" rel="noopener">用 useContext + useReducer 替代 redux</a>。</p><p>你可以在新项目中或者涉及状态管理不多的项目中尝试使用，现有的大型项目不建议重构，使用 Redux 依然是不错的方案。</p><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = useCallback(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    doSomething(a, b);</span><br><span class="line">  &#125;,</span><br><span class="line">  [a, b],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>返回一个 <code>memoized</code> 回调函数。</p><p>把内联回调函数及依赖项数组作为参数传入 <code>useCallback</code> ，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 <code>shouldComponentUpdate</code> ）的子组件时，它将非常有用。</p><p><code>useCallback(fn, deps)</code> 相当于 <code>useMemo(() =&gt; fn, deps)</code>。</p><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</span><br></pre></td></tr></table></figure><p>返回一个 memoized 值。</p><p><code>useCallback</code> 与 <code>useMemo</code> 都可以用于 React 性能优化的手段。</p><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> refContainer = useRef(initialValue);</span><br></pre></td></tr></table></figure><p><code>useRef</code> 返回一个可变的 <code>ref</code> 对象，其 <code>.current</code> 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。</p><p>所以，这个方法就相当于 class 中的 <code>ref</code> 属性，用于获取具体的DOM元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextInputWithFocusButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class="line">    inputEl.current.focus();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;input ref=&#123;inputEl&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h3><h3 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h3><h3 id="useDebugValue"><a href="#useDebugValue" class="headerlink" title="useDebugValue"></a>useDebugValue</h3><p>上面未说明的 Hook 可以查看 <a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usecontext" target="_blank" rel="noopener">React 官网</a></p><h2 id="Hook-规则"><a href="#Hook-规则" class="headerlink" title="Hook 规则"></a>Hook 规则</h2><p>Hook <strong>永远是在最顶层调用</strong>，不能在条件判断语句或者其他语句中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 正确</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(name === <span class="string">'tal'</span>)&#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误</span></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'tal'</span>) &#123;</span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你害怕你写错了，但是没有检查出来，可以使用 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener">eslint-plugin-react-hooks</a> 这个插件来检测。</p><h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><p>Hook 我们也是可以自定义的。那么为什么需要自定义。答案是 <strong>逻辑共享</strong>。</p><p>假如有一个 state 需要在多个组件中使用，我们不应该在多个组件中都单独的去创建这个 state， 而是应该<strong>逻辑共享</strong>。把这个 state 以及操作这个 state 的方法定义在我们自己的 Hook 中。那这个 Hook 就是我们自定义的 Hook，其实，他也是一个函数，接收参数，返回你需要的值。唯一需要注意的是：<strong>自定义 Hook 必须以 <code>use</code> 开头</strong>，不管怎么变，使用需要遵循 React Hook 以 <code>use</code> 开头的规则。</p><p>下面是一个获取window视窗的hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useCallback, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取窗口大小</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useWinSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [size, setSize] = useState(&#123;</span><br><span class="line">    width: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">    height: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onResize = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setSize(&#123;</span><br><span class="line">      width: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">      height: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, onResize);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, onResize);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useWinSize;</span><br></pre></td></tr></table></figure><p><a href="https://zh-hans.reactjs.org/docs/hooks-custom.html" target="_blank" rel="noopener">官网介绍</a></p>]]></content>
    
    <summary type="html">
    
      React Hook介绍，React Hook笔记
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react" scheme="https://blog.lyt007.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react 读书笔记</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/react-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>https://blog.lyt007.cn/技术/react-读书笔记.html</id>
    <published>2020-01-09T02:46:51.000Z</published>
    <updated>2020-04-13T03:13:34.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在-React-组件中，代码重用的主要方式是组合而不是继承。"><a href="#在-React-组件中，代码重用的主要方式是组合而不是继承。" class="headerlink" title="在 React 组件中，代码重用的主要方式是组合而不是继承。"></a>在 React 组件中，代码重用的主要方式是组合而不是继承。</h2><blockquote><p>We strongly recommend against creating your own base component classes. In React components, code reuse is primarily achieved through composition rather than inheritance.</p></blockquote><p>这句话来自于react的<a href="https://reactjs.org/docs/react-component.html" target="_blank" rel="noopener">官方网站</a></p><p>为什么要提及这句话呢。因为现在我的项目中也有自己的创建的组件类，然后其余的组件来继承它。</p><p>其实最开始我也是一步一步的使用<code>class App extends React.Component</code>来写我自己的组件，这样确实有点复杂，但是还算过得去。或许是因为初学react或者是对react的了解不深入，所以，一直就这样。去年了解了一下同事的安卓开发，他们都会建一个基础的类来继承于这个类，这个基础的类实现了一些公用的方法，所以继承于这个基础类的组件也会有这些方法，而且不用每一次都引入。这样理念确实很不错。自己用了一段时间，某些地方也确实方便，尤其是在组件数据请求的时候，需要渲染不同的组件（loading，completed，empty，request_error and so on），而且目前还没有发现有什么不一样的地方，因为这些继承于基础类的组件也是可以使用React的生命周期。直到今天，我才知道，原来这是<strong>违背了react的开发理念</strong>。那要怎么实现呢。正如上面所说</p><blockquote><p>code reuse is primarily achieved through composition rather than inheritance.</p></blockquote><p>通过组件的组合来实现，通过<code>props</code>参数来实现，具体查看<a href="https://reactjs.org/docs/composition-vs-inheritance.html" target="_blank" rel="noopener">Composition vs Inheritance</a>。</p><p>虽说这样开发可能会复杂一点（或许是自己的技术能力有限），不过这样也算是符合react的理念。</p><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>react组件的生命周期作为react开发人员面试的必考知识，还是很有必要实时掌握，并且实时更新。</p><p>React生命周期有一份<a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">图谱</a>。上面可以查看react的生命周期(新版)。</p><p>react的组件的生命周期在react16.3及以后的版本中已经不一样了。但是总的几个阶段是不变的，不管是新的版本还是老的版本，都分为</p><ul><li>组件挂载</li><li>组件更新</li><li>组件卸载</li></ul><p>这样的几个阶段。</p><h3 id="React16-3以前的生命周期-作为了解"><a href="#React16-3以前的生命周期-作为了解" class="headerlink" title="React16.3以前的生命周期(作为了解)"></a>React16.3以前的生命周期(作为了解)</h3><h4 id="1-组件挂载"><a href="#1-组件挂载" class="headerlink" title="1.组件挂载"></a>1.组件挂载</h4><ol><li>getDefaultProps()：加载的时候调用一次，设置默认的<code>props</code>，也可以使用<code>组件名.defaultProps = {}</code>设置默认属性。</li><li>getInitialState()：加载的时候调用一次，可以初始化<code>state</code>。</li><li>componentWillMount()：只在组件挂载的时候调用，且整个生命周期只调用一次，此时可以修改<code>state</code>。但是一般不使用</li><li>render()：react的最重要的步骤，创建虚拟DOM，进行<code>diff算法</code>,更新DOM树都在此运行</li><li>componentDidMount()：组件渲染之后（执行rendeer后）调用一次</li></ol><h4 id="2-组件更新"><a href="#2-组件更新" class="headerlink" title="2.组件更新"></a>2.组件更新</h4><ol><li>componentWillReceiveProps(nextProps)：组件加载时不使用，组件接收新的<code>props</code>是调用</li><li>shouldComponentUpdate(nextProps, nextState)：组件接收到新的props或state时调用，函数<strong>必须</strong>有一个返回值（true or false），为<code>true</code>的时候组件更新，为 <code>flase</code> 的时候组件不更新。默认返回的是<code>true</code>。这个方法很重要，一个组件的优化都在这里面进行。</li><li>componentWillUpdata(nextProps, nextState)</li><li>render()：react的最重要的步骤，创建虚拟DOM，进行<code>diff算法</code>,更新DOM树都在此运行</li><li>componentDidUpdate()：组件挂载时不调用，组件更新完成调用</li></ol><h3 id="3-卸载阶段"><a href="#3-卸载阶段" class="headerlink" title="3.卸载阶段"></a>3.卸载阶段</h3><ol><li>componentWillUnmount()：组件将要移除时候调用。一般在这个函数里面清除定时器，异步操作等</li></ol><h3 id="React16-3以后的生命周期"><a href="#React16-3以后的生命周期" class="headerlink" title="React16.3以后的生命周期"></a>React16.3以后的生命周期</h3><h3 id="1-挂载阶段"><a href="#1-挂载阶段" class="headerlink" title="1.挂载阶段"></a>1.挂载阶段</h3><ol><li>constructor()：在这个构造函数中一般处理初始化state或者进行方法的绑定，如不需要，则可以不使用此方法</li><li>static getDerivedStateFromProps()：会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。</li><li>render()</li><li>componentDidMount()</li></ol><p>*.componentWillMount方法在新的生命周期中已经过期，应该替换成<code>UNSAFE_componentWillMount</code>，不过也将在react17中移除</p><h3 id="2-更新阶段"><a href="#2-更新阶段" class="headerlink" title="2.更新阶段"></a>2.更新阶段</h3><ol><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate(prevProps, prevState)：此方法并不常使用</li><li>componentDidUpdate()</li></ol><p>*. 老方法的<code>componentWillUpdate</code>以及<code>componentWillReceiveProps</code>即将过期，应该避免使用它们</p><h3 id="3-卸载阶段-1"><a href="#3-卸载阶段-1" class="headerlink" title="3.卸载阶段"></a>3.卸载阶段</h3><ol><li>componentWillUnmount()</li></ol><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ol><li>static getDerivedStateFromProps()</li><li>componentDidCatch(error, info)：此生命周期在后代组件抛出错误后被调用</li></ol><p>总的来说新的生命周期移除了一些不必要的函数。具体的可以查看<a href="https://zh-hans.reactjs.org/docs/react-component.html" target="_blank" rel="noopener">React.Component</a></p><h2 id="对-React-时间操作节流与防抖"><a href="#对-React-时间操作节流与防抖" class="headerlink" title="对 React 时间操作节流与防抖"></a>对 React 时间操作节流与防抖</h2><ul><li>节流：节流阻止函数在给定时间窗口内被调不能超过一次。</li><li>防抖：防抖确保函数不会在上一次被调用之后一定量的时间内被执行。当必须进行一些费时的计算来响应快速派发的事件时（比如鼠标滚动或键盘事件时），防抖是非常有用的。</li></ul><p>以前在进行按钮提交，鼠标滚动等操作的时候，都会进行截留或者是防抖。但是都是自己写的，有时候或者是有的地方会忘记添加。</p><p><a href="https://lodash.com" target="_blank" rel="noopener">lodash</a>中已经有相关的函数了</p><ul><li><a href="https://lodash.com/docs/4.17.15#throttle" target="_blank" rel="noopener">throttle</a></li><li><a href="https://lodash.com/docs/4.17.15#debounce" target="_blank" rel="noopener">debounce</a></li></ul><p>但是，整个 lodash 的库应用进来有1.4M，太大了。不过还好，npm 上面已经有 throttle 和 debounce 的提取包了。</p><ul><li><p><a href="https://www.npmjs.com/package/lodash.throttle" target="_blank" rel="noopener">https://www.npmjs.com/package/lodash.throttle</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash.throttle</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.npmjs.com/package/lodash.debounce" target="_blank" rel="noopener">https://www.npmjs.com/package/lodash.debounce</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash.debounce</span><br></pre></td></tr></table></figure></li></ul><p>都接收两个参数，第一个是操作的函数，第二个是时间间隔(ms)。</p>]]></content>
    
    <summary type="html">
    
      react读书笔记，来自于文档，书籍等资料中的见解以及感悟
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react" scheme="https://blog.lyt007.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react项目报错集锦</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/react%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%E9%9B%86%E9%94%A6.html"/>
    <id>https://blog.lyt007.cn/技术/react项目报错集锦.html</id>
    <published>2020-01-03T03:08:36.000Z</published>
    <updated>2020-04-13T03:13:34.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Warning-Can’t-perform-a-React-state-update-on-an-unmounted-component-This-is-a-no-op-but-it-indicates-a-memory-leak-in-your-application-To-fix-cancel-all-subscriptions-and-asynchronous-tasks-in-the-componentWillUnmount-method"><a href="#Warning-Can’t-perform-a-React-state-update-on-an-unmounted-component-This-is-a-no-op-but-it-indicates-a-memory-leak-in-your-application-To-fix-cancel-all-subscriptions-and-asynchronous-tasks-in-the-componentWillUnmount-method" class="headerlink" title="Warning: Can’t perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method."></a>Warning: Can’t perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.</h2><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20200103111012.png" alt="错误截图"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>解决方法上面其实以及说到了。只需要找到对象的文件，在 <code>componentWillUnmount</code> 中取消所有的订阅以及异步执行即可。</p><p>下面是代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Avatar <span class="keyword">from</span> <span class="string">'@img/common/avatar.jpeg'</span></span><br><span class="line"><span class="keyword">import</span> Stance <span class="keyword">from</span> <span class="string">'@img/common/stance.png'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CusImage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> defaultImage = props.isAvatar ? Avatar : Stance</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      src: defaultImage</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">const</span> THIS = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> &#123;imgSrc&#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">    img.src = imgSrc</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      THIS.setState(&#123;</span><br><span class="line">        src: imgSrc</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加以下代码</span></span><br><span class="line">  componentWillUnmount()&#123;</span><br><span class="line">    <span class="comment">// 如果有定时器需要清除</span></span><br><span class="line">    <span class="comment">// clearTimeout(this.timer)</span></span><br><span class="line">    <span class="keyword">this</span>.setState = <span class="function">(<span class="params">state, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render ()&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;src&#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> &#123;className, alt = <span class="string">"cus-img"</span>&#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;img className=&#123;className&#125; src=&#123;src&#125; alt=&#123;alt&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CusImage</span><br></pre></td></tr></table></figure></p><h2 id="react-dom-development-js-12427-Warning-componentWillMount-has-been-renamed-and-is-not-recommended-for-use-See-https-fb-me-react-unsafe-component-lifecycles-for-details"><a href="#react-dom-development-js-12427-Warning-componentWillMount-has-been-renamed-and-is-not-recommended-for-use-See-https-fb-me-react-unsafe-component-lifecycles-for-details" class="headerlink" title="react-dom.development.js:12427 Warning: componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details."></a>react-dom.development.js:12427 Warning: componentWillMount has been renamed, and is not recommended for use. See <a href="https://fb.me/react-unsafe-component-lifecycles" target="_blank" rel="noopener">https://fb.me/react-unsafe-component-lifecycles</a> for details.</h2><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20200103143951.png" alt="错误截图"></p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>在 react 16.8 之后的版本中，修改了一下生命周期，移除了一些方法，<code>componentWillMount</code>就是其中一个。现在如果要使用这个，使用 <code>UNSAFE_componentWillMount</code> 替换。但是不建议使用这个方法</p>]]></content>
    
    <summary type="html">
    
      react项目报错(警告)以及处理方式
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react" scheme="https://blog.lyt007.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>前端中的直播</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E4%B8%AD%E7%9A%84%E7%9B%B4%E6%92%AD.html"/>
    <id>https://blog.lyt007.cn/技术/前端中的直播.html</id>
    <published>2019-11-05T02:50:55.000Z</published>
    <updated>2020-04-13T03:13:34.970Z</updated>
    
    <content type="html"><![CDATA[<p>因为公司是做在线抓娃娃的，涉及到直播推流这一部分的工作。之前一直都是在App上面进行游戏，所以关于直播这一部分也是与安卓与IOS有关，与前端是没有关系的。但是现在新的需求就是要求这个在线抓娃娃要能够在网页上面进行游戏。所以，我的事情来了。对于没有涉及到前端音视频的这部分的需求，所以初入这一行，还是有点马马虎虎，花了一周多的时间终于是弄明白了。</p><p>要了解前端视频方面的东西，还是要从基础的说起。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>2019年了，HTML5已经走进千家万户，同时，直播也在全球盛行。App端的姑且不说，web端的使用视频播放的话，一般都是在用HTML5中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video" target="_blank" rel="noopener">video</a> 标签了。然而，video标签的限制实在是太多了，尤其是对于播放格式这一项，仅仅是支持 <code>MP4</code> <code>OGG</code> <code>WebM</code> 格式，现在可能还支持 <code>m3u8</code> 格式的视频。</p><p>但是，再来看看现在的直播方面的知识</p><h2 id="直播简介"><a href="#直播简介" class="headerlink" title="直播简介"></a>直播简介</h2><p>关于直播，大概的过程是：<strong>推流—&gt;源站—&gt;客户端拉流—&gt;客户端播放</strong></p><ol><li>推流：指的是把采集阶段封包好的内容传输到服务器的过程。</li><li>拉流：一般是一个URL地址，即播放地址，有多种类型的流。</li></ol><p>视频直播服务目前常用的包含三种协议（当前时间阿里云的直播推流也是这三种协议），分别是RTML， HLS， (HTTP-)FLV。</p><p>下面附上一张知乎上面的推流拉流图</p><p><img src="https://pic2.zhimg.com/80/7cb543431f65ddc2d328856f1fcc47fc_hd.jpg" alt="推流拉流图"></p><p>###<br>RTMP: RTMP是Real Time Messaging Protocol（实时消息传输协议）的缩写，是Adobe公司为Flash/AIR平台和服务器之间音、视频及数据传输开发的实时消息传送协议。RTMP协议基于TCP，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。RTMP协议中，视频必须是H264编码，音频必须是AAC或MP3编码，且多以flv格式封包。RTMP是目前最主流的流媒体传输协议，对CDN支持良好，实现难度较低，是大多数的直播平台的选择。不过RTMP有着一个最大的不足——不支持浏览器，且Adobe已不再更新。因此直播服务要支持浏览器的话，需要另外的推送协议支持。</p><p>优点：</p><ul><li>延时低，稳定性好，支持摄像头格式多</li></ul><p>缺点：</p><ul><li>浏览器需要加载flash才可以播放（预计2020年底所有浏览器最新版本都不在支持flash）</li><li>RTMP是私有协议（Adobe的私有协议），很多设备无法播放。同时移动端不支持flash。所以，这种格式的视频基本无法再移动端使用。</li><li>安全性问题</li></ul><h3 id="HLS"><a href="#HLS" class="headerlink" title="HLS"></a>HLS</h3><p><a href="https://www.jianshu.com/p/426425cad08a" target="_blank" rel="noopener">HLS</a>（Http Live Streaming) 是一个由苹果公司提出的基于HTTP的流媒体网络传输协议，直接把流媒体切片成一段段，信息保存到<code>m3u(m3u8)</code>列表文件中， 可以将不同速率的版本切成相应的片；播放器可以直接使用http协议请求流数据。</p><p>优点：</p><ul><li>可以在不同速率的版本间自由切换，实现无缝播放</li><li>省去使用其他协议的烦恼</li></ul><p>缺点：</p><ul><li>延时高，不适合做直播</li><li>因为采用ts切片，所以一个文件可能会被切成成百上千个小文件，对存储和缓存都有一定的挑战</li></ul><p>这个流一般用于苹果web浏览器的直播，因为FLV和RMTP都不支持IOS的移动端（手机与平板）</p><h3 id="HTTP-FLV"><a href="#HTTP-FLV" class="headerlink" title="HTTP-FLV"></a>HTTP-FLV</h3><p>关于FLV在目前来说还是一个更好的方案，关于FLV方面的介绍可以查看<a href="https://github.com/gwuhaolin/blog/issues/3" target="_blank" rel="noopener">使用flv.js做直播</a>。上面有详细的介绍。</p><p>因为bilibili开源flv.js的原因，使得flv在目前的直播中用的更多，尤其是在移动端中使用flv流。</p><p>上面的三种方案RTMP是最好的，不管是延时还是性能问题。所以，最好的方案就是PC端采用RTMP，移动端采用HTTP-FLV。但是要考虑一点就是2020年的flash的问题。</p><h2 id="前端做直播"><a href="#前端做直播" class="headerlink" title="前端做直播"></a>前端做直播</h2><p>在视频播放方面，前端有一个开源的插件<a href="https://github.com/videojs/video.js" target="_blank" rel="noopener">videojs</a>。可以播放HTML5的视频格式以及Flash方面的视频。但是，在6.X开始的版本后，videojs不在支持flash，需要单独引用<a href="https://github.com/videojs/videojs-flash" target="_blank" rel="noopener">videojs-flash</a>插件，或者是使用6.X以下的版本。</p><p><strong>重点注意：videojs+flash不支持移动端</strong>。当初在这里纠结了两天的时间，实在是没有办法。</p><p>我使用的是react框架开发的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> videojs <span class="keyword">from</span> <span class="string">'video.js'</span></span><br><span class="line"><span class="comment">// import videozhCN from 'video.js/dist/lang/zh-CN.json'; //播放器中文，不能使用.js文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'video.js/dist/video-js.css'</span>;  <span class="comment">//样式文件注意要加上</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'videojs-flash'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoPlayer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// console.log(flvjs);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// instantiate Video.js</span></span><br><span class="line">    <span class="comment">//这里的this.props是上级传进来的video的options</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.player = videojs(<span class="keyword">this</span>.videoNode, <span class="keyword">this</span>.props, <span class="function"><span class="keyword">function</span> <span class="title">onPlayerReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'onPlayerReady'</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    videojs.addLanguage(<span class="string">'zh-CN'</span>, videozhCN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this.player.liveTracker.on('liveedgechange', () =&gt; &#123;</span></span><br><span class="line">      <span class="comment">// console.log('跟随直播');</span></span><br><span class="line">      <span class="comment">// this.player.liveTracker.seekToLiveEdge();</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// destroy player on unmount</span></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.player) &#123;</span><br><span class="line">      <span class="keyword">this</span>.player.dispose()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wrap the player in a div with a `data-vjs-player` attribute</span></span><br><span class="line">  <span class="comment">// so videojs won't create additional wrapper in the DOM</span></span><br><span class="line">  <span class="comment">// see https://github.com/videojs/video.js/pull/3856</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt; </span><br><span class="line">        &lt;div data-vjs-player&gt;  &#123;<span class="comment">/*这个带有属性的div目前没看到作用，可以去掉*/</span>&#125;</span><br><span class="line">          &lt;video ref=&#123; node =&gt; <span class="keyword">this</span>.videoNode = node &#125; className=<span class="string">"video-js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VideoPlayer</span><br></pre></td></tr></table></figure><p>引用 VideoPlayer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; storage &#125; <span class="keyword">from</span> <span class="string">'@utils'</span></span><br><span class="line"><span class="keyword">import</span> &#123; constant &#125; <span class="keyword">from</span> <span class="string">'@data/constant'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      videoSrc: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.videoJsOptions = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">const</span> THIS = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> token = storage.getItem(constant.TOKEN)</span><br><span class="line">    <span class="keyword">var</span> toyid = <span class="number">913</span></span><br><span class="line">    <span class="keyword">var</span> URL = <span class="string">`wss://XXX.XXX.com//websocket/1.0.0/WEB/<span class="subst">$&#123;toyid&#125;</span>/<span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">    <span class="keyword">const</span> socket = <span class="keyword">new</span> WebSocket(URL);</span><br><span class="line">    socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(msg.data)</span><br><span class="line">      <span class="comment">// var cmd = data.cmd</span></span><br><span class="line">      <span class="comment">// var code = data.code</span></span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 没有登录</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> data.data === <span class="string">"string"</span>) <span class="keyword">return</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// users  data.data.room.users.users</span></span><br><span class="line">      <span class="keyword">let</span> users = data.data.room.users.users</span><br><span class="line">      <span class="keyword">let</span> currentPlayer = users.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.play === <span class="literal">true</span>)</span><br><span class="line">      <span class="keyword">let</span> waitingPlayers = users.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.play === <span class="literal">false</span>)</span><br><span class="line">      <span class="keyword">let</span> videoSrc = data.data.room.video.split(<span class="string">','</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">let</span> newState = &#123;&#125;</span><br><span class="line">      <span class="keyword">if</span> (currentPlayer.length) &#123;</span><br><span class="line">        newState.currentPlayer = currentPlayer[<span class="number">0</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (waitingPlayers.length) &#123;</span><br><span class="line">        newState.waitingPlayers = waitingPlayers</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (videoSrc) &#123;</span><br><span class="line">        <span class="comment">// videoSrc = videoSrc.replace("rtmp", "http") + ".flv"</span></span><br><span class="line">        <span class="built_in">console</span>.log(videoSrc);</span><br><span class="line">        </span><br><span class="line">        newState.videoSrc = videoSrc</span><br><span class="line">        THIS.setOptions(videoSrc)</span><br><span class="line">      &#125;</span><br><span class="line">      THIS.setState(newState)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setOptions(videoSrc) &#123;</span><br><span class="line">    <span class="keyword">const</span> videoContainer = <span class="keyword">this</span>.refs[<span class="string">"video-container"</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 播放器的配置</span></span><br><span class="line">    <span class="keyword">const</span> videoJsOptions = &#123;</span><br><span class="line">      autoplay: <span class="literal">true</span>,  <span class="comment">//自动播放</span></span><br><span class="line">      language: <span class="string">'zh-CN'</span>, </span><br><span class="line">      <span class="comment">// controls: true,  //控制条</span></span><br><span class="line">      preload: <span class="literal">true</span>,  <span class="comment">//自动加载</span></span><br><span class="line">      <span class="comment">// errorDisplay: true,  //错误展示</span></span><br><span class="line">      width: videoContainer.clientWidth,  <span class="comment">//宽</span></span><br><span class="line">      height: videoContainer.clientHeight,  <span class="comment">//高</span></span><br><span class="line">      <span class="comment">// fluid: true,  //跟随外层容器变化大小，跟随的是外层宽度</span></span><br><span class="line">      <span class="comment">// controlBar: false,  // 设为false不渲染控制条DOM元素，只设置controls为false虽然不展示，但还是存在</span></span><br><span class="line">      <span class="comment">// textTrackDisplay: false,  // 不渲染字幕相关DOM</span></span><br><span class="line">      userActions: &#123;</span><br><span class="line">        <span class="comment">// hotkeys: true  //是否支持热键</span></span><br><span class="line">      &#125;,</span><br><span class="line">      sources: [</span><br><span class="line">        &#123;</span><br><span class="line">          src: videoSrc,</span><br><span class="line">          <span class="comment">// src: 'http://live2.get.cpxlive.com/live2/front124.m3u8',</span></span><br><span class="line">          <span class="comment">// src: "http://snowman.mobilecpx.com/video/wifi-socket.mp4",</span></span><br><span class="line">          <span class="comment">// type: "rmtp/flv"</span></span><br><span class="line">          type: <span class="string">"application/x-mpegURL"</span>,  <span class="comment">//类型可加可不加，目前未看到影响</span></span><br><span class="line">          <span class="comment">// type: 'video/mp4',</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.videoJsOptions = videoJsOptions</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; videoSrc &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"cpx-game flex-content"</span>&gt;</span><br><span class="line">        &lt;section ref=<span class="string">"video-container"</span> className=<span class="string">"cpx-game-video"</span>&gt;</span><br><span class="line">          &#123;videoSrc &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">VideoPlayer</span> &#123;<span class="attr">...this.videoJsOptions</span>&#125;/&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Game</span></span><br></pre></td></tr></table></figure><blockquote><p>注意注意：上面的视频能够播放了，但是。播放的时候中间会出现一个<img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20191108150821.png" alt="我还要自己去点击播放？">。没错，自己点击播放。真没意思。如果要解决这个问题，需要引入 <code>video-js.swf</code> 。这个在 <code>node_modules/videojs-swf</code> 下面有一个 video-js.swf 文件。我是直接把把他引入到了<img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20191108151102.png" alt="同级目录">下面。这样处理完成后就可以自动播放了。真是操蛋了。</p></blockquote><p>VidePlayer.js修改如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> videojs <span class="keyword">from</span> <span class="string">'video.js'</span></span><br><span class="line"><span class="comment">// import videozhCN from 'video.js/dist/lang/zh-CN.json'; //播放器中文，不能使用.js文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'video.js/dist/video-js.css'</span>;  <span class="comment">//样式文件注意要加上</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'videojs-flash'</span>  <span class="comment">//如果要播放RTMP要使用flash 需要先npm i videojs-flash</span></span><br><span class="line"><span class="comment">// 引用这个中间就不会出现那个 SB 的Flash播放按钮</span></span><br><span class="line">+ <span class="keyword">import</span> swf <span class="keyword">from</span> <span class="string">'./video-js.swf'</span></span><br><span class="line">+ videojs.options.flash.swf = swf</span><br></pre></td></tr></table></figure><p>上面的PC的，采用的是RTMP的流</p><p>如果是flv的流，react可以使用<a href="https://github.com/gwuhaolin/reflv" target="_blank" rel="noopener">reflv</a>这个插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Reflv <span class="keyword">from</span> <span class="string">'reflv'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoPlayer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;url&#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Reflv</span><br><span class="line">        url=&#123;url&#125;</span><br><span class="line">        type=<span class="string">"flv"</span></span><br><span class="line">        isLive</span><br><span class="line">        cors</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VideoPlayer</span><br></pre></td></tr></table></figure><p>更多的配置参数查看<a href="https://gwuhaolin.github.io/reflv/" target="_blank" rel="noopener">https://gwuhaolin.github.io/reflv/</a></p>]]></content>
    
    <summary type="html">
    
      web播放器，前web直播
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="直播" scheme="https://blog.lyt007.cn/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="前端直播" scheme="https://blog.lyt007.cn/tags/%E5%89%8D%E7%AB%AF%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>移动端web页面开发的一些问题</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98.html"/>
    <id>https://blog.lyt007.cn/技术/移动端web页面开发的一些问题.html</id>
    <published>2019-10-30T01:34:55.000Z</published>
    <updated>2020-04-13T03:13:34.972Z</updated>
    
    <content type="html"><![CDATA[<p>前端涉及到的领域不单单只是PC浏览器了，现在是移动为王的时代，所以大部分的时候还是在做移动端的页面适配。所以这里记录一下在移动端开发的时候遇到的一些问题。</p><h1 id="1、移动端隐藏手机浏览器的地址栏以及底部的菜单栏"><a href="#1、移动端隐藏手机浏览器的地址栏以及底部的菜单栏" class="headerlink" title="1、移动端隐藏手机浏览器的地址栏以及底部的菜单栏"></a>1、移动端隐藏手机浏览器的地址栏以及底部的菜单栏</h1><p>在设置移动端页面的宽高为100%的时候，里面的元素设置<code>flex:1</code>的时候，因为浏览器的地址栏以及下面的工具栏的问题会导致在有的手机上面的页面显示不全的问题。因为我们不好计算每一个浏览器的地址栏以及工具栏的高度，所以我们直接把它隐藏起来即可，下面的隐藏的代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- webApp全屏显示，IOS设备 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'apple-mobile-web-app-capable'</span> <span class="attr">content</span>=<span class="string">'yes'</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通用的浏览器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'full-screen'</span> <span class="attr">content</span>=<span class="string">'true'</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ浏览器（X5内核）独有的META --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'x5-fullscreen'</span> <span class="attr">content</span>=<span class="string">'true'</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 360浏览器独有的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'360-fullscreen'</span> <span class="attr">content</span>=<span class="string">'true'</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2、移动端网页自适应"><a href="#2、移动端网页自适应" class="headerlink" title="2、移动端网页自适应"></a>2、移动端网页自适应</h1><p>在开发网页的时候适配是一个老生常谈的话题。现在的适配基本都是使用的rem布局。而跟标签（html标签）的自己大小根据手机的屏幕大小来设置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  (<span class="function"><span class="keyword">function</span> <span class="params">(doc, win)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> docEl = doc.documentElement,</span></span><br><span class="line"><span class="javascript">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span></span><br><span class="line"><span class="actionscript">        recalc = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(clientWidth&gt;=<span class="number">640</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                docEl.style.fontSize = <span class="string">'100px'</span>;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                docEl.style.fontSize = <span class="number">100</span> * (clientWidth / <span class="number">640</span>) + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="actionscript">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">  &#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的一段代码则是自动修的HTML的跟标签的字体大小的标签，然后就可以使用rem来设置元素的宽高了。但是，rem不能设置字体的自适应。</p><p>对于我而言，现在都是9102了，vw,vh,vmin,vmax这几个属性。来看看<a href="https://caniuse.com/#search=vw" target="_blank" rel="noopener">can i use</a>上面的兼容性检测。</p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20191030100525.png" alt="Viewport units: vw, vh, vmin, vmax"></p><p>其实可以看到还是挺不错的，安卓4.4以上的都是兼容的。所以在9102这个年代了，可以放心大胆的使用了，就算是华为手机自带的浏览器也没有毛病。关于华为浏览器的问题可以查看我的另一篇文章 <a href="./关于使用react16以上在华为手机上面显示出现问题的解决方法.html">关于使用react16以上在华为手机上面显示出现问题的解决方法</a></p><p>关于rem以及vw, vh, vmin, vmax的具体可以查看<a href="https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/" target="_blank" rel="noopener">Rem布局的原理解析</a>。本来想放大漠的文章，今天去看突然就要付费才可以看了。</p><h1 id="3、移动端-a-标签点击会有蓝色的背景色"><a href="#3、移动端-a-标签点击会有蓝色的背景色" class="headerlink" title="3、移动端 a 标签点击会有蓝色的背景色"></a>3、移动端 a 标签点击会有蓝色的背景色</h1><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>添加<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">-webkit-tap-highlight-color</span>:transparent; &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      移动端web开发的一些问题以及解决方法
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="移动端web" scheme="https://blog.lyt007.cn/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb/"/>
    
  </entry>
  
  <entry>
    <title>关于使用react16以上在华为手机上面显示出现问题的解决方法</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8react16%E4%BB%A5%E4%B8%8A%E5%9C%A8%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E4%B8%8A%E9%9D%A2%E6%98%BE%E7%A4%BA%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
    <id>https://blog.lyt007.cn/技术/关于使用react16以上在华为手机上面显示出现问题的解决方法.html</id>
    <published>2019-10-29T06:06:37.000Z</published>
    <updated>2020-04-13T03:13:34.969Z</updated>
    
    <content type="html"><![CDATA[<p>项目的网站开发了一段时间了，最近也忙着华为应用市场的上架。所以关于华为的事情也是需要着手考虑一下。</p><h1 id="问题一：使用16-8的react以及reactDOM华为自带浏览器白屏"><a href="#问题一：使用16-8的react以及reactDOM华为自带浏览器白屏" class="headerlink" title="问题一：使用16.8的react以及reactDOM华为自带浏览器白屏"></a>问题一：使用16.8的react以及reactDOM华为自带浏览器白屏</h1><p>在使用react开发的项目中，所有的浏览器（自己用的，公司没有测试）都能够跑起来。但是在使用华为手机自带的浏览器的时候，却出现了一片空白的情况。</p><p>开发用到的依赖如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">"axios": "^0.18.0",</span><br><span class="line">"babel-polyfill": "^6.26.0",</span><br><span class="line">"core-js": "^3.3.5",</span><br><span class="line">"customize-cra": "^0.5.0",</span><br><span class="line">"firebase": "^6.1.0",</span><br><span class="line">"i18next": "^15.1.3",</span><br><span class="line">"i18next-browser-languagedetector": "^3.0.1",</span><br><span class="line">"i18next-xhr-backend": "^2.0.1",</span><br><span class="line">"js-cookie": "^2.2.0",</span><br><span class="line">"mescroll.js": "^1.4.1",</span><br><span class="line">"moment": "^2.24.0",</span><br><span class="line">"node-sass": "^4.12.0",</span><br><span class="line">"payment": "^2.3.0",</span><br><span class="line">"prerender-spa-plugin": "^3.4.0",</span><br><span class="line">"qs": "^6.7.0",</span><br><span class="line">"react": "^16.8.6",</span><br><span class="line">"react-app-rewired": "^2.1.3",</span><br><span class="line">"react-confirm-alert": "^2.4.1",</span><br><span class="line">"react-credit-cards": "^0.7.0",</span><br><span class="line">"react-dom": "^16.8.6",</span><br><span class="line">"react-ga": "^2.6.0",</span><br><span class="line">"react-i18next": "^10.10.0",</span><br><span class="line">"react-paypal-express-checkout": "^1.0.5",</span><br><span class="line">"react-redux": "^7.0.3",</span><br><span class="line">"react-router-dom": "^5.0.0",</span><br><span class="line">"react-scripts": "3.0.1",</span><br><span class="line">"react-switch": "^5.0.0",</span><br><span class="line">"react-toastify": "^5.1.1",</span><br><span class="line">"redux": "^4.0.1"</span><br></pre></td></tr></table></figure><p>版本是 <code>16.8</code> 的react以及reactDOM。</p><p>查询很多资料，最后得知 reactDOM 在16开始的时候就是使用的ES6的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="noopener">Map</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener">Set</a>。而华为浏览器以及其他的一些未知浏览器使用的还是低版本的浏览器内核。</p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/华为自带浏览器UA.jpg" alt="华为自带浏览器UA"></p><p>37.0.0.0.0 这可是4年轻的内核了。所以是不兼容了。</p><p>React官方给出了<a href="https://reactjs.org/docs/javascript-environment-requirements.html" target="_blank" rel="noopener">说明</a></p><p>但是使用<code>babel-polyfill</code>仍然无法解决</p><p>所以，这里使用 <code>core-js</code>,使用如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'core-js/es/map'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'core-js/es/set'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这样就可以解决华为手机无法显示（或者说是显示空白的问题）。</p><h1 id="问题二：使用fixed定位的时候没有显示出来"><a href="#问题二：使用fixed定位的时候没有显示出来" class="headerlink" title="问题二：使用fixed定位的时候没有显示出来"></a>问题二：使用fixed定位的时候没有显示出来</h1><p>项目中有一个支付需求需要在页面弹出支付通道选择（信用卡，paypal等），但是设置显示的时候出现了没有弹出选择界面的情况，但是实际上又确实有这个页面（只显示它的时候）。修的定位层级的时候也是无法显示。最后发现，<strong>在华为等低端浏览器内核的手机上面同时需要设置定位的位置才可以（left:0, top:0）</strong>，高版本的内核的浏览器没有这个问题，我猜想是自己默认就是（left:0, top:0）了。</p>]]></content>
    
    <summary type="html">
    
      关于使用react16以上在华为手机上面显示出现问题的解决方法
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react" scheme="https://blog.lyt007.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react项目预渲染开发</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/react%E9%A1%B9%E7%9B%AE%E9%A2%84%E6%B8%B2%E6%9F%93%E5%BC%80%E5%8F%91.html"/>
    <id>https://blog.lyt007.cn/技术/react项目预渲染开发.html</id>
    <published>2019-09-27T06:15:03.000Z</published>
    <updated>2020-04-13T03:13:34.967Z</updated>
    
    <content type="html"><![CDATA[<p>react越来越火了，是开react开发的人员而是越来越多。但是因为单页应用SEO的问题，我们也不得不去解决这个问题。不管是哪里，都提供了两种方案，一种是SSR服务端渲染，另一种则是预渲染方式。本篇文章主要是阐述预渲染的方案。</p><h2 id="什么是预渲染"><a href="#什么是预渲染" class="headerlink" title="什么是预渲染"></a>什么是预渲染</h2><p>在一般的react项目中（比如使用create-react-app创建的项目），我们在最后打包的时候只会生成一个HTML，JS与CSS文件，或许你会采用一些方法，比如公共文件拆分，路由懒加载等等生成多个文件，但是也无法从根本上解决这个问题，所有的资源还是通过JS动态的生成渲染的。</p><p>所以，<strong>所谓的预渲染</strong>就是在单页应用中，将用户交互不多，同时需要SEO的页面单独提取出来的一种方法，提取出来的就是一个HTML文件。</p><h2 id="怎么使用预渲染"><a href="#怎么使用预渲染" class="headerlink" title="怎么使用预渲染"></a>怎么使用预渲染</h2><p>开发react项目的时候，一般都是结合者webpack使用的。目前用的最多的预渲染的方法，就是使用webpack插件<a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="noopener">prerender-spa-plugin</a>。这是一个webpack插件，所以使用直接在webpack的插件配置项中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">  routes: [<span class="string">"/"</span>, <span class="string">"/download"</span>, <span class="string">"/prize"</span>, <span class="string">"/news"</span>, <span class="string">"/news/detail?id=1"</span>, <span class="string">"/support"</span>],</span><br><span class="line">  staticDir: path.join(__dirname, <span class="string">'build'</span>),</span><br><span class="line">  renderer: <span class="keyword">new</span> Renderer(&#123;</span><br><span class="line">    renderAfterTime: <span class="number">50000</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中<code>routes</code>是需要预渲染的route，一般都是react-router-dom配置的路由。 <code>staticDir</code>是输出的目录。因为这里使用了create-react-app，默认的输出目录是build，所以，这里也是build，如果你是自己搭建或者使用的是其他的方式，或许目录名字会有所不同。</p><p>更多具体的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 摘取自github</span></span><br><span class="line"><span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">  <span class="comment">// Required - The path to the webpack-outputted app to prerender.</span></span><br><span class="line">  staticDir: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional - The path your rendered app should be output to.</span></span><br><span class="line">  <span class="comment">// (Defaults to staticDir.)</span></span><br><span class="line">  outputDir: path.join(__dirname, <span class="string">'prerendered'</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional - The location of index.html</span></span><br><span class="line">  indexPath: path.join(__dirname, <span class="string">'dist'</span>, <span class="string">'index.html'</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Required - Routes to render.</span></span><br><span class="line">  routes: [ <span class="string">'/'</span>, <span class="string">'/about'</span>, <span class="string">'/some/deep/nested/route'</span> ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional - Allows you to customize the HTML and output path before</span></span><br><span class="line">  <span class="comment">// writing the rendered contents to a file.</span></span><br><span class="line">  <span class="comment">// renderedRoute can be modified and it or an equivelant should be returned.</span></span><br><span class="line">  <span class="comment">// renderedRoute format:</span></span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   route: String, // Where the output file will end up (relative to outputDir)</span></span><br><span class="line">  <span class="comment">//   originalRoute: String, // The route that was passed into the renderer, before redirects.</span></span><br><span class="line">  <span class="comment">//   html: String, // The rendered HTML for this route.</span></span><br><span class="line">  <span class="comment">//   outputPath: String // The path the rendered HTML will be written to.</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  postProcess (renderedRoute) &#123;</span><br><span class="line">    <span class="comment">// Ignore any redirects.</span></span><br><span class="line">    renderedRoute.route = renderedRoute.originalRoute</span><br><span class="line">    <span class="comment">// Basic whitespace removal. (Don't use this in production.)</span></span><br><span class="line">    renderedRoute.html = renderedRoute.html.split(<span class="regexp">/&gt;[\s]+&lt;/gmi</span>).join(<span class="string">'&gt;&lt;'</span>)</span><br><span class="line">    <span class="comment">// Remove /index.html from the output path if the dir name ends with a .html file extension.</span></span><br><span class="line">    <span class="comment">// For example: /dist/dir/special.html/index.html -&gt; /dist/dir/special.html</span></span><br><span class="line">    <span class="keyword">if</span> (renderedRoute.route.endsWith(<span class="string">'.html'</span>)) &#123;</span><br><span class="line">      renderedRoute.outputPath = path.join(__dirname, <span class="string">'dist'</span>, renderedRoute.route)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> renderedRoute</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional - Uses html-minifier (https://github.com/kangax/html-minifier)</span></span><br><span class="line">  <span class="comment">// To minify the resulting HTML.</span></span><br><span class="line">  <span class="comment">// Option reference: https://github.com/kangax/html-minifier#options-quick-reference</span></span><br><span class="line">  minify: &#123;</span><br><span class="line">    collapseBooleanAttributes: <span class="literal">true</span>,</span><br><span class="line">    collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">    decodeEntities: <span class="literal">true</span>,</span><br><span class="line">    keepClosingSlash: <span class="literal">true</span>,</span><br><span class="line">    sortAttributes: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Server configuration options.</span></span><br><span class="line">  server: &#123;</span><br><span class="line">    <span class="comment">// Normally a free port is autodetected, but feel free to set this if needed.</span></span><br><span class="line">    port: <span class="number">8001</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The actual renderer to use. (Feel free to write your own)</span></span><br><span class="line">  <span class="comment">// Available renderers: https://github.com/Tribex/prerenderer/tree/master/renderers</span></span><br><span class="line">  renderer: <span class="keyword">new</span> Renderer(&#123;</span><br><span class="line">    <span class="comment">// Optional - The name of the property to add to the window object with the contents of `inject`.</span></span><br><span class="line">    injectProperty: <span class="string">'__PRERENDER_INJECTED'</span>,</span><br><span class="line">    <span class="comment">// Optional - Any values you'd like your app to have access to via `window.injectProperty`.</span></span><br><span class="line">    inject: &#123;</span><br><span class="line">      foo: <span class="string">'bar'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Optional - defaults to 0, no limit.</span></span><br><span class="line">    <span class="comment">// Routes are rendered asynchronously.</span></span><br><span class="line">    <span class="comment">// Use this to limit the number of routes rendered in parallel.</span></span><br><span class="line">    maxConcurrentRoutes: <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Optional - Wait to render until the specified event is dispatched on the document.</span></span><br><span class="line">    <span class="comment">// eg, with `document.dispatchEvent(new Event('custom-render-trigger'))`</span></span><br><span class="line">    renderAfterDocumentEvent: <span class="string">'custom-render-trigger'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Optional - Wait to render until the specified element is detected using `document.querySelector`</span></span><br><span class="line">    renderAfterElementExists: <span class="string">'my-app-element'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Optional - Wait to render until a certain amount of time has passed.</span></span><br><span class="line">    <span class="comment">// NOT RECOMMENDED</span></span><br><span class="line">    renderAfterTime: <span class="number">5000</span>, <span class="comment">// Wait 5 seconds.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Other puppeteer options.</span></span><br><span class="line">    <span class="comment">// (See here: https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerlaunchoptions)</span></span><br><span class="line">    headless: <span class="literal">false</span> <span class="comment">// Display the browser window when rendering. Useful for debugging.</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>renderAfterTime</code> 这个属性最好配置，可以在等待一定时间后在来导出另一个路由文件，如果不添加，可能会出<code>Unable to perrender all routes</code>的错误。</p><h2 id="上线到服务器"><a href="#上线到服务器" class="headerlink" title="上线到服务器"></a>上线到服务器</h2><p>打包后可以先在本地的服务器上面测试，这里推荐一个npm包： <a href="https://www.npmjs.com/package/serve" target="_blank" rel="noopener">serve</a> 安装后通过 <code>serve 文件夹名字</code>启动一个本地服务。</p><p>需要注意的是：</p><ol><li><p>当项目正常运行，同时包含多个路由的时候，当我们在除了首页以外的其他的目录刷新页面的时候都是404，这是因为服务器的配置问题。本地这里无法实现。</p></li><li><p>开发的时候必须使用 History 路由而不能使用 Hash 路由。</p></li></ol><p>1, 2 文件的解决方法就是修改nginx的配置如下</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> /&#123;</span><br><span class="line">    <span class="keyword">index</span>  <span class="keyword">index</span>.html <span class="keyword">index</span>.htm;</span><br><span class="line">    <span class="keyword">if</span> (!-e $request_filename) &#123;</span><br><span class="line">        rewrite ^/(.*) /<span class="keyword">index</span>.html last;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>对于动态路由，如<code>/news/detail/:id</code>是不支持的，推荐使用query路由，如<code>/new/detail?id=</code></li></ol>]]></content>
    
    <summary type="html">
    
      react 项目SEO，预渲染模式的SEO
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react" scheme="https://blog.lyt007.cn/tags/react/"/>
    
      <category term="SEO" scheme="https://blog.lyt007.cn/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>前端基础算法</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95.html"/>
    <id>https://blog.lyt007.cn/技术/前端基础算法.html</id>
    <published>2019-09-10T08:05:02.000Z</published>
    <updated>2020-04-23T09:05:46.932Z</updated>
    
    <content type="html"><![CDATA[<p>对于前端初学者而言，这样的一个功能你做出来了那就很好，慢慢的，我们的工作年限越来越长，如果我们还继续那样做，这样，迟早会淘汰。这个时候，就需要对你的项目进行优化。之前讲到过对于<a href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/react%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96.html">react项目的优化</a>。这更多是针对于单页应用的优化，避免首页时间加载过长，打包文件加载过大，是针对于打包后文件来说的。这篇文章主要是针对于算法相关的代码进行优化，从而是程序的运行速度更快，已达到程序的优化。</p><p>算法更多的是针对于数据的增删改查，或许你认为前端涉及不到，如果这样想，那你就错了。前端可能用的不多，但不会涉及不到，同时，了解算法，那么对于以后的职业道路也会有所帮助。</p><h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><p><a href="https://zh.wikipedia.org/wiki/二分搜索算法" target="_blank" rel="noopener">二分查找</a>在进行查找<strong>有序数组</strong>中某一项数据的时候非常有用，可以加快程序的运行速度，尤其是在具有大量数据的时候。</p><p>二分查找的原理是从数组的中间开始查找，如果被查找对象刚好就是中间这一项，那直接退出查找。如果被查找对象大于中间，那么所需要的对象是在<em>中间-最后</em>这一区间，所以有针对于这一区间再次进行二分。如此下去，找到所需要的即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找</span></span><br><span class="line"><span class="comment"> * @param &#123;Array&#125; list  待查找的有序数组</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; item 待查找的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">list, item</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果list不是数组返回list</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(list)) <span class="keyword">return</span> list</span><br><span class="line">    <span class="comment">// 定义查找的起始位置</span></span><br><span class="line">    <span class="keyword">let</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> high = list.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="comment">// 定义中间的位置</span></span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((low + high) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">let</span> midValue = list[mid]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( midValue == item ) <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (midValue &lt; item)&#123;</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (midValue &gt; item)&#123;</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后来看看一个具体的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    arr.push(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> need = <span class="number">6734</span></span><br><span class="line"><span class="keyword">let</span> res;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"for"</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> ele = arr[i];</span><br><span class="line">  <span class="keyword">if</span>( ele === need ) &#123;</span><br><span class="line">    res = i</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"for"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"binarySearch"</span>)</span><br><span class="line">res = binarySearch(arr, need)</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"binarySearch"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20190910163005.png" alt></p><p>可以看到很明显二分查找比普通的循环遍历快了许多。</p><p>可视化链接</p><p><a href="https://algorithm-visualizer.org/branch-and-bound/binary-search" target="_blank" rel="noopener">https://algorithm-visualizer.org/branch-and-bound/binary-search</a></p><p>时间复杂度 <strong>O(\log n)</strong></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>上面讲到的二分查找虽然性能很好，当时有一个必要的条件就是这个list需要是一个有序数组，否则使用二分查找则是不成立的。所以，对于一个无序的数组，我们首先就是需要把它重新排序。<a href="https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">选择排序</a>就是其中一种。</p><p>选择排序的原理是从数组中选出一个最大（小）的数，放在另一个数组的开始，然后从剩余数组中继续选择最大（小）的数进行操作，如此重复，直到数组重组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(list)) <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个数组存放排序后的数组</span></span><br><span class="line">  <span class="keyword">const</span> arr = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = list.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> smallestIndex = findSmallest(list)</span><br><span class="line">    arr.push(list.splice(smallestIndex, <span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找最小的数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findSmallest</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> smallest = list[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> smallestIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> ele = list[i];</span><br><span class="line">    <span class="keyword">if</span> (ele &lt; smallest) &#123;</span><br><span class="line">      smallest = ele</span><br><span class="line">      smallestIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> smallestIndex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端基础算法，二分，快排
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://blog.lyt007.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>各种IT网站收藏</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E5%90%84%E7%A7%8DIT%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F.html"/>
    <id>https://blog.lyt007.cn/技术/各种IT网站收藏.html</id>
    <published>2019-09-03T02:26:30.000Z</published>
    <updated>2020-04-13T03:13:34.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-command"><a href="#git-command" class="headerlink" title="git command"></a>git command</h2><ul><li><a href="https://www.yiibai.com/git" target="_blank" rel="noopener">git command</a></li></ul><h2 id="前端九部-前端入门手册"><a href="#前端九部-前端入门手册" class="headerlink" title="前端九部-前端入门手册"></a>前端九部-前端入门手册</h2><ul><li><a href="https://www.yuque.com/fe9/basic/zw24qu" target="_blank" rel="noopener">前端九部-前端入门手册</a></li></ul><h3 id="Vuejs开源项目"><a href="#Vuejs开源项目" class="headerlink" title="Vuejs开源项目"></a>Vuejs开源项目</h3><ul><li><a href="https://github.com/opendigg/awesome-github-vue" target="_blank" rel="noopener">vuejs开源项目汇总</a></li></ul><h3 id="react开源项目汇总"><a href="#react开源项目汇总" class="headerlink" title="react开源项目汇总"></a>react开源项目汇总</h3><ul><li><a href="https://github.com/zuiidea/antd-admin" target="_blank" rel="noopener">一套优秀的中后台前端解决方案</a></li><li><a href="https://github.com/trazyn/ieaseMusic" target="_blank" rel="noopener">网易云音乐第三方</a></li><li><a href="https://github.com/bailicangdu/react-pxq" target="_blank" rel="noopener">一个 react + redux 的完整项目 和 个人总结</a></li><li><a href="https://github.com/yezihaohao/react-admin" target="_blank" rel="noopener">react 后台管理系统解决方案</a></li><li><a href="https://github.com/crazycodeboy/GitHubPopular" target="_blank" rel="noopener">这是一个用来查看GitHub最受欢迎与最热项目的App,它基于React Native支持Android和iOS双平台</a></li><li><a href="https://github.com/stoneWeb/elm-react-native" target="_blank" rel="noopener">RN写的饿了么，还原度相当高，实现了各类动效</a></li><li><a href="https://github.com/race604/ZhiHuDaily-React-Native" target="_blank" rel="noopener">仿知乎日报</a></li><li><a href="https://github.com/biaochenxuying/blog-react" target="_blank" rel="noopener">react + Ant Design + 支持 markdown 的博客前台展示</a></li><li><a href="https://github.com/gershonv/react-blog" target="_blank" rel="noopener">使用 react hooks + koa2 + sequelize + mysql 搭建的前后台的博客</a></li><li><a href="https://github.com/fxy5869571/blog-react" target="_blank" rel="noopener">基于typescript koa2 react的个人博客</a></li></ul><h3 id="前端面试题"><a href="#前端面试题" class="headerlink" title="前端面试题"></a>前端面试题</h3><ul><li><a href="https://github.com/haizlin/fe-interview" target="_blank" rel="noopener">前端每日3+1</a></li><li><a href="https://muyiy.cn/question/" target="_blank" rel="noopener">壹题汇总-木易杨</a></li></ul><h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><ul><li><a href="https://github.com/bailicangdu/node-elm" target="_blank" rel="noopener">基于 node.js + Mongodb 构建的后台系统</a></li><li><a href="https://github.com/cnodejs/nodeclub" target="_blank" rel="noopener">Nodeclub 是使用 Node.js 和 MongoDB 开发的社区系统</a></li><li><a href="https://github.com/tumobi/nideshop-mini-program" target="_blank" rel="noopener">基于Node.js+MySQL开发的开源微信小程序商城（微信小程序）</a></li><li><a href="https://github.com/tumobi/nideshop" target="_blank" rel="noopener">NideShop 开源微信小程序商城服务端 API（Node.js + ThinkJS）</a></li><li><a href="https://github.com/Nealyang/React-Express-Blog-Demo" target="_blank" rel="noopener">React+Express+Mongo -&gt;前后端博客网站</a></li><li><a href="https://github.com/biaochenxuying/blog-node" target="_blank" rel="noopener">基于 node + express + mongodb 的博客网站后台</a></li></ul><h3 id="免费视频"><a href="#免费视频" class="headerlink" title="免费视频"></a>免费视频</h3><ul><li><a href="https://jspang.com/posts/2017/01/11/all-video-list.html" target="_blank" rel="noopener">技术胖免费视频</a></li></ul><h3 id="react-native"><a href="#react-native" class="headerlink" title="react native"></a>react native</h3><ul><li><a href="https://www.jianshu.com/p/c7a8f115dca0" target="_blank" rel="noopener">React Native 第三方组件之–UI类</a></li></ul>]]></content>
    
    <summary type="html">
    
      IT网站收藏
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="网站收藏" scheme="https://blog.lyt007.cn/tags/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>通过自己实现函数 call,apply,bind 来了解他们的原理</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E9%80%9A%E8%BF%87%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0-call-apply-bind-%E6%9D%A5%E4%BA%86%E8%A7%A3%E4%BB%96%E4%BB%AC%E7%9A%84%E5%8E%9F%E7%90%86.html"/>
    <id>https://blog.lyt007.cn/技术/通过自己实现函数-call-apply-bind-来了解他们的原理.html</id>
    <published>2019-08-21T03:00:53.000Z</published>
    <updated>2020-04-23T09:05:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道函数中的call，apply，bind都是可以修改函数的this指向。关于函数的this指向问题可以转到<a href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/javascript-this%E7%9A%84%E6%8C%87%E5%90%91%E7%9A%84%E9%97%AE%E9%A2%98.html">Javascript this 指向问题</a>这篇文章。</p><p>在<a href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/javascript-this%E7%9A%84%E6%8C%87%E5%90%91%E7%9A%84%E9%97%AE%E9%A2%98.html">Javascript this 指向问题</a>一篇中我们知道函数运行时候this是取决于调用这个函数的对象。如果一个函数定义在了全局，那么这个this就指向window。</p><p>来看一段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"tal"</span></span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">"boy"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tal = &#123;</span><br><span class="line">  name: <span class="string">"踏浪"</span>,</span><br><span class="line">  sex: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.sex)</span><br><span class="line">&#125;</span><br><span class="line">person() <span class="comment">// tal boy</span></span><br></pre></td></tr></table></figure></p><p>上面的<code>person</code>是定义在全局中的一个函数，<code>person()</code>调用的时候相当于是<code>window.person()</code>，是由window调用的，所以，<code>this.name</code>和<code>this.sex</code>都需要在window对象中寻找，即全局变量中找。所以，最后的值会是<code>tal</code>与<code>boy</code>。</p><p>再来。我们来调用一下原生的<code>call</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"tal"</span></span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">"boy"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tal = &#123;</span><br><span class="line">  name: <span class="string">"踏浪"</span>,</span><br><span class="line">  sex: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.sex)</span><br><span class="line">&#125;</span><br><span class="line">person.call(tal) <span class="comment">// 踏浪 男</span></span><br></pre></td></tr></table></figure><p>在调用了<code>call</code>函数以后，最后的值是<code>踏浪 男</code>。得到的是对象<code>tal</code>中的两个属性值。此时函数中的this指向了对象<code>tal</code>。结合上面的例子，直接调用<code>person</code>函数的时候，相当于是<code>window.person()</code>的执行，所以那时this指向了window。那现在既然指向了<code>tal</code>，换言之，就是相当于<code>tal.person()</code>执行了。</p><h2 id="call-的实现"><a href="#call-的实现" class="headerlink" title="call 的实现"></a>call 的实现</h2><p>所以我们可以这样实现<code>mycall</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  context.fn()</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mycall</code>接收一个参数，即一个对象，最终的this指向这个对象。函数内部实现在这个传入的对象中绑定上我们需要执行的这个函数，即<code>context.fn = this</code>一行。最后调用<code>context.fn()</code>。因为我们这样操作修改了传入对象的属性（添加了一个fn属性），所以最后需要删除这个fn属性。这样，第一版的call的实现已经完成。</p><p>接下来，原生 call 函数是可以接收参数的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tal = &#123;</span><br><span class="line">  name: <span class="string">"踏浪"</span>,</span><br><span class="line">  sex: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.sex)</span><br><span class="line">&#125;</span><br><span class="line">person.call(tal, <span class="number">18</span>) <span class="comment">// 踏浪 男</span></span><br></pre></td></tr></table></figure><p>那我们自己实现的mycall要想能够接收参数，怎么实现呢</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">var</span> len = <span class="built_in">arguments</span>.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    args.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args.join(<span class="string">","</span>) + <span class="string">')'</span>)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们需要在 mycall 调用的时候传递参数，而且参数的个数不确定，所以需要使用 arguments 。同时因为第一个参数以及确定了是我们需要的一个对象，this指向这个对象。所以 arguments 需要从 <strong>1</strong> 开始。我们用一个数组把需要的东西存放起来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = [];</span><br><span class="line"><span class="keyword">var</span> len = <span class="built_in">arguments</span>.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">  args.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是这样的话，我传递过去后数组 <code>args = [18, &quot;成都&quot;]</code> 里面的每一项要怎么传递到 <code>context.fn()</code> 里面并且执行呢？或许你会想到时候 <code>join(&quot;,&quot;)</code> 方法，OK，没有问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = args.join(<span class="string">","</span>);</span><br><span class="line">context.fn(res);</span><br></pre></td></tr></table></figure><p>这样么？不是。res的值是 <code>18,成都</code> 没问题，但是这就是一个字符串而已，我们要实现传递两个参数，所以，想到了把字符串与函数拼接。即有了 <code>&#39;context.fn(&#39; + args.join() + &#39;)&#39;</code>。这样最后就可以了。但是这只是一个字符串，怎么运行呢？这个时候就需要用到 <strong>ES3中的eval</strong> 直接传递这个参数进度即可。</p><p>上面的 join 方法其实就是把一个数组转换成了字符串，除了 join，你还能想到什么呢？对。可以使用字符转换来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="string">""</span> + args + <span class="string">""</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">res = args.toString()</span><br></pre></td></tr></table></figure><p>因为每一个隔开的方式是 <code>,</code> 所以可以使用上面的两种，其他的就不行咯。</p><p>所以最终的 mycall</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">var</span> len = <span class="built_in">arguments</span>.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    args.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args.join(<span class="string">","</span>) + <span class="string">')'</span>)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="apply的实现"><a href="#apply的实现" class="headerlink" title="apply的实现"></a>apply的实现</h2><p>有个实现call的过程，在来实现apply就容易多了。唯一不同的就是apply传递的参数是一个数组，而call是具体的每一项。只需要在参数上面做处理即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">var</span> array = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> ( <span class="keyword">typeof</span> array !== <span class="string">"object"</span> || !(array <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"The 2'rd args must be Array."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; len = array.length, i &lt; len; i++) &#123;</span><br><span class="line">    args.push(<span class="string">'array['</span> + i + <span class="string">']'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args.toString() + <span class="string">')'</span>)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>arguments[1]</code> 是一个数组了。我们需要对它遍历，并且判断它是不是一个数组。其余的与 call 一样。</p><h2 id="bind的实现"><a href="#bind的实现" class="headerlink" title="bind的实现"></a>bind的实现</h2><p>原生的bind有两种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tal = &#123;</span><br><span class="line">  name: <span class="string">"踏浪"</span>,</span><br><span class="line">  sex: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.sex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.bind(tal)(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">person.bind(tal, <span class="number">18</span>)()</span><br></pre></td></tr></table></figure><p>所以。使用bind都需要调用两次，而第一次就是返回一个函数。原函数的参数可以在bind中调用，也可以在第二次运行时候调用。所以，根据调用bind时候传递的参数的个数确定最后是返回那种函数，有了下面的这段代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">var</span> len = <span class="built_in">arguments</span>.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    args.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  context.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果 mybind 的参数的个数只有一个，那么剩余参数在调用的时候传入</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> sub_args = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; len = <span class="built_in">arguments</span>.length, i &lt; len; i++) &#123;</span><br><span class="line">        sub_args.push(<span class="string">'arguments['</span> + i + <span class="string">']'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + sub_args.toString() + <span class="string">')'</span>)</span><br><span class="line">      <span class="keyword">delete</span> context.fn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 这里不能使用 arguments，这里面的 arguments 是这个 return 函数的而不是最开始的。</span></span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">'context.fn('</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; len = args.length, i &lt; len; i++) &#123;</span><br><span class="line">        str += <span class="string">"args["</span>+i+<span class="string">"],"</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> newStr = str.replace(<span class="regexp">/,$/</span>, <span class="string">")"</span>)</span><br><span class="line">      <span class="built_in">eval</span>(newStr)</span><br><span class="line">      <span class="keyword">delete</span> context.fn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过自己实现 call， apply， bind 这三种方法，能够更深刻的理解到这三个函数的原理，同时涉及到的只是点也多：this指向，arguments类数组，每一个对象都要的toSting方法（另一个是valueOf），eval方法的使用（不是滥用，webpack中就使用了这个方法），函数对象可以使用 delete 删除（使用var 定义的无法使用delete删除）。或许你已经明白了，但是代码种东西，还是自己动动手，印象更深刻。</p>]]></content>
    
    <summary type="html">
    
      通过自己实现函数 call,apply,bind 来了解他们的原理
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="https://blog.lyt007.cn/tags/JavaScript/"/>
    
      <category term="手写源码分析原理" scheme="https://blog.lyt007.cn/tags/%E6%89%8B%E5%86%99%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>深入解析CSS样式优先级</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90CSS%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7.html"/>
    <id>https://blog.lyt007.cn/技术/深入解析CSS样式优先级.html</id>
    <published>2019-08-17T01:38:27.000Z</published>
    <updated>2020-04-13T03:13:34.971Z</updated>
    
    <content type="html"><![CDATA[<p>作为前端多多少少都会对CSS样式的权重有一定的了解。最常用的方法就是对不同的选择器分配不同的权重比，常见的就是</p><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:center">权重值</th></tr></thead><tbody><tr><td style="text-align:center">!important标识</td><td style="text-align:center">10000</td></tr><tr><td style="text-align:center">行内样式</td><td style="text-align:center">1000</td></tr><tr><td style="text-align:center">id选择器</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">类选择器</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">标签选择器</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">通配符 *</td><td style="text-align:center">0</td></tr></tbody></table><p>具体的判断我们可以用一个矩阵来表示：(0, 0, 0, 0, 0)。那这里面的每一个矩阵的0表示的是</p><ul><li>第一个：<code>!important</code> 的个数</li><li>第二个：行内的个数</li><li>第三个：id选择器的个数</li><li>第四个：类选择器的个数</li><li>第五个：标签选择器的个数</li></ul><p>行内除了<code>!important</code>高于其他的样式。<strong>同时，这里的这个矩阵实际上是不存在的，是认为的构建出来的。</strong>因为<code>!important</code>始终最高，所以这里可以忽略第一个，最后矩阵为(0, 0, 0, 0)。</p><p>上面表格中是我们在写css样式的时候需要了解最的基本的知识，也是最为普通的选择器权重分配。权重值越高，权重越高，那么样式的优先级就越高。所以，<code>!important</code>的权重是最高的。正式因为这一点，所以<code>!important</code>在编写css样式的时候一般都不建议使用，因为使用了<code>!important</code>后，要想在修改样式，几乎是不可能的，即，样式会变得不好控制。</p><p>其次是行内样式。在现在前端开发中，为了更好的阅读代码，是代码调理更清晰，一般都会把CSS代码以及JS代码从HTML中分离，采用外链的方式引入CSS以及JS。所以，行内样式在一般的开发中，用的也不多。但是，在使用前端三大框架或者是需要使用JS来控制样式的时候，多多少少的都会涉及到把样式写在HTML元素行内的情况。</p><p>接着是ID选择器。在编写样式的时候，我们一般都不会使用ID选择器来控制样式，同时也不会在HTML文档中添加过多的ID选择器。ID选择器一般更多的是用于获取元素，而不是用来控制CSS样式。</p><p>再者是类选择器。这个在CSS样式的编写中用的算是最多的一种，因为一个标签可以添加多个类名，不像ID只能添加一个，编写不同的类名来控制不同的样式显示，同时根据权重来控制样式的覆盖。</p><p>然后是标签选择器，这个在开发中也是不建议使用，更多的是建议添加一个类名来控制，以实现复用，同时方便控制。</p><p>最后是通配符选择器，这个选择器的使用一般就是初始化文档结构。例如<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是更多的公司采取的是具有针对的样式重置，比如<a href="https://github.com/tal007/tools/blob/master/css/reset.css" target="_blank" rel="noopener">reset.css</a>。</p><p>以上就是常用的样式选择器以及他们的权重。</p><h2 id="主要选择器的权重比较"><a href="#主要选择器的权重比较" class="headerlink" title="主要选择器的权重比较"></a>主要选择器的权重比较</h2><p><strong>权重累加</strong></p><p>上面的权重值我们已经知道了，那么具体怎么来算呢？个人认为，需要记住一这点就OK了。<code>相同类型的权重值累加，然后在比较相同类型选择器的值</code>。举个🌰</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"box div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，来看看这个div盒子的颜色应该是什么呢？分析一下CSS样式：</p><p>根据上面的矩阵(0, 0, 0, 0)来分析。</p><p><code>#div</code>的矩阵为(0, 0, 1, 0, 0)，最后的权重值为：1*100 = 100。</p><p><code>div.div</code>的矩阵为(0, 0, 0, 1, 1)，最后的权重值为：1 <em> 10 + 1 </em>1 = 11。</p><p>所以最后的样式显示 <code>background: green;</code></p><p>有了这样的结论，我这里又做了一个测试。有下面的一段html代码与样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box6"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box7"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box8"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box9"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box10"</span> <span class="attr">class</span>=<span class="string">"box10"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box10</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.box1</span> <span class="selector-class">.box2</span> <span class="selector-class">.box3</span> <span class="selector-class">.box4</span> <span class="selector-class">.box5</span> <span class="selector-class">.box6</span> <span class="selector-class">.box7</span> <span class="selector-class">.box8</span> <span class="selector-class">.box9</span> <span class="selector-class">.box10</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按理说 <code>#box10</code> 的权重为 100 * 1 = 100</p><p><code>.box .box1 .box2 .box3 .box4 .box5 .box6 .box7 .box8 .box9 .box10</code> 的权重为 10 * 11 = 110</p><p>下面使用多个类的权重值理论上是高于上面只使用一个id选择器的情况，但是最后的结构却不是我们想象的那样。结果还是 <span style="color: green;">green</span> 。没错，后面的11个类的样式无效。经过这样的测试，我们可以猜想，在一个元素使用了ID选择器修饰了样式以后，如果在使用类选择器，这时候是是没有办法使相同的样式属性生效，生效的依然是那个ID选择器修饰的样式。为什么权重值大也没有用呢？我猜或许是因为写了太多类名的时候再和ID相比的话，浏览器会自己去判断，选择最优的那个，毕竟10多个类名在实际的开发中是不存在的。在张鑫旭大神的<a href="https://www.zhangxinxu.com/wordpress/2012/08/256-class-selector-beat-id-selector/" target="_blank" rel="noopener">有趣：256个class选择器可以干掉1个id选择器</a>有一个实验，但是这个实验室在2012年的时候，那个时候，还是使用的IE浏览器能够呈现出来。但是现在大部分的浏览器都不能够呈现出256个class干掉一个id的情况了。同时，也证明了，上面我们定义的矩阵(0, 0, 0, 0)其实并不严谨，id与class之前的差距我们这里以10作为一个标准，但是实际上可能达到100，或者1000。即1000个class干掉一个ID。但是由于现代编码一般要求class的层级书写的时候不要超过四层，所以，目前这个问题也就没有什么意义了。</p><p>因此，上面的矩阵也可以作为我们判断的标准。</p><h2 id="其他类型选择器的权重比较"><a href="#其他类型选择器的权重比较" class="headerlink" title="其他类型选择器的权重比较"></a>其他类型选择器的权重比较</h2><p>上面说了几种常用的选择器了，但是还有一些选择器也是在开发中会出现，但是不是太常用的一些选择器。那么，有哪些呢？</p><p>w3c中样式选择器的权重优先级的排序如下</p><blockquote><p>important &gt; 内嵌样式 &gt; ID &gt; 类 | 伪类 | 属性选择  &gt; 标签 | 伪元素 &gt; 伪对象 &gt; 继承 &gt; 通配符 | 子选择器 | 相邻选择器</p></blockquote><ul><li>伪类选择器，如<code>:hover</code></li><li>属性选择器，如<code>[type=&quot;text&quot;]</code></li><li>伪元素选择器，如<code>::first-letter</code></li><li>子选择器<code>&gt;</code>，相邻兄弟选择器<code>+</code>等等</li></ul><h3 id="伪类的优先级"><a href="#伪类的优先级" class="headerlink" title="伪类的优先级(:)"></a>伪类的优先级(:)</h3><p>首先来看看伪类选择器的优先级。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div &#123;</span></span><br><span class="line"><span class="undefined">      margin-top: 10px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="undefined">      background: lime;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="undefined">      background: pink;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="undefined">      background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的代码在<a href="https://codepen.io/Anthony-Wilson/pen/ZEzOeLW" target="_blank" rel="noopener">codePen</a>中的具体效果，可以看到</p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/伪类与类的优先级.gif" alt="伪类与类的优先级"></p><p>当将鼠标分别移动到两个div盒子上面的时候，前面的绿色盒子的背景色会发生变化，而红色盒子不会。但是，都是 <code>:hover</code> 的一盒伪类。所以判定，<strong>伪类的权重与类的权重是相同的</strong>。</p><h3 id="属性选择器的优先级"><a href="#属性选择器的优先级" class="headerlink" title="属性选择器的优先级"></a>属性选择器的优先级</h3><p>同样是上面的代码，我们把样式改为<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[class="box1"]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: lime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[class="box2"]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>唯一不同的就是样式中添加了属性选择器<code>[class=&quot;box1&quot;]</code>与<code>[class=&quot;box2&quot;]</code>。同时顺序发生了改变。</p><p>代码可看[<a href="https://codepen.io/Anthony-Wilson/pen/YzKWZpL]https://codepen.io/Anthony-Wilson/pen/YzKWZpL" target="_blank" rel="noopener">https://codepen.io/Anthony-Wilson/pen/YzKWZpL]https://codepen.io/Anthony-Wilson/pen/YzKWZpL</a></p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/伪类，类与属性选择器的优先级.gif" alt="伪类，类与属性选择器的优先级">。</p><p>所以，<strong>属性选择的权重 = 类的权重 = 伪类的权重</strong>。三者是相等的，都是(0, 0, 1, 0);</p><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器(::)"></a>伪元素选择器(::)</h3><p>伪元素作为一种特殊的存在，我认为它不应该放在优先级里面同其他的选择器相比。比如 <code>::before</code> 和 <code>::after</code> 这两种伪元素都是在文档中添加一个假的元素，并不能够设置 id class 等属性。所以这里可以把它作为一个唯一的存在。那么他的权重我们可以看为1。同时没有和他比较的。</p><h3 id="子选择器-gt-，相邻兄弟选择器"><a href="#子选择器-gt-，相邻兄弟选择器" class="headerlink" title="子选择器&gt;，相邻兄弟选择器+"></a>子选择器<code>&gt;</code>，相邻兄弟选择器<code>+</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="undefined">      color: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &gt; <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="undefined">      color: blue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="undefined">      color: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我<span class="tag">&lt;/<span class="name">span</span>&gt;</span>是一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box2"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我<span class="tag">&lt;/<span class="name">span</span>&gt;</span>是一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的例子在codePen中的<a href="https://codepen.io/Anthony-Wilson/pen/pozbPgP" target="_blank" rel="noopener">运行结果</a></p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20190817170254.png" alt="运行结果"></p><p>可以看到，第一个我是蓝色，第二个我是红色。结合上面的代码，可以看出来子元素选择器和普通的空格其实没有太多的区别，同理兄弟选择器其实也是一样的。遇到这种情况，直接比较 class 与 标签的个数就可以了。即同基本的权重判断是相同的。</p><h2 id="结果总结"><a href="#结果总结" class="headerlink" title="结果总结"></a>结果总结</h2><p>经过上面的推想测试，可以大致的得出一个优先级的结论：</p><blockquote><p>!important &gt; ID &gt; class = 属性 = 伪类 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器自带属性</p></blockquote><p>在使用选择器的时候尽可能的选择使用 class选择器或者属性选择器（针对于input这一类）来对元素设置样式。一个是使用class可以复用，第二个可以更好的控制元素样式。同时，关于class命名的规范建议使用<a href="https://www.cnblogs.com/imwtr/p/8521031.html" target="_blank" rel="noopener">BEM</a>命名规范。</p><h2 id="补充：2019年08月22日"><a href="#补充：2019年08月22日" class="headerlink" title="补充：2019年08月22日"></a>补充：2019年08月22日</h2><p>在网上看到这样的一道题</p><p>问题：已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改。</p><blockquote><p>&lt;img src=”1.jpg” style=”width:480px!important;”&gt;</p></blockquote><p>期初看到这段代码一下子就想到这都 <code>!important</code> 了还有办法限制它的宽度？真的是被无知限制了想象力。</p><p>这里提供几种方法实现修改宽度：</p><h3 id="1、使用max-width"><a href="#1、使用max-width" class="headerlink" title="1、使用max-width"></a>1、使用max-width</h3><p>虽然使用了 <code>important</code> ，但是也只是添加到了 <code>width</code> 属性上面，并不影响 max-width 。所以这里设置了 max-width 即可生效。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用-transform-scale"><a href="#2、使用-transform-scale" class="headerlink" title="2、使用 transform:scale"></a>2、使用 transform:scale</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(0.625);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、使用-zoom"><a href="#3、使用-zoom" class="headerlink" title="3、使用 zoom"></a>3、使用 zoom</h3><p>这个和CSS3的缩放是一样的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">zoom</span>: <span class="number">0.625</span>：</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、使用-js"><a href="#4、使用-js" class="headerlink" title="4、使用 js"></a>4、使用 js</h3><p>这个和CSS3的缩放是一样的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>].setAttribute(<span class="string">"style"</span>,<span class="string">"width:300px!important;"</span>)</span><br></pre></td></tr></table></figure><h3 id="5、使用弹性盒模型"><a href="#5、使用弹性盒模型" class="headerlink" title="5、使用弹性盒模型"></a>5、使用弹性盒模型</h3><p>这个和CSS3的缩放是一样的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">90px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、使用animation"><a href="#6、使用animation" class="headerlink" title="6、使用animation"></a>6、使用animation</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: width <span class="number">0s</span> forwards;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> width &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      深入分析CSS样式的优先级
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="https://blog.lyt007.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>使用socket实现即时通讯聊天室</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E4%BD%BF%E7%94%A8socket%E5%AE%9E%E7%8E%B0%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E8%81%8A%E5%A4%A9%E5%AE%A4.html"/>
    <id>https://blog.lyt007.cn/技术/使用socket实现即时通讯聊天室.html</id>
    <published>2019-08-06T01:45:59.000Z</published>
    <updated>2020-04-13T03:13:34.969Z</updated>
    
    <content type="html"><![CDATA[<p>websocket早在几年前就已经很流行了，主要就是用于即时通讯这一方面应用，可以是聊天，也可使是直播流传输等等。</p><p>今天，就来说说如何使用 create-react-app + socket.io 实现简单的即时聊天。</p><p><a href="http://118.24.6.33:2000" target="_blank" rel="noopener">Demo地址</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>想要实现即时通讯，还是需要有服务器的支持，这里我使用的是一个简单配置的服务器</p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20190806095919.png" alt="服务器配置"></p><p>还是去年腾讯搞活动买的，还不错，有机会你们也可以去看看。阿里云腾讯云都会时不时的出一些活动，买一个服务器自己玩玩还是可以的。如果有活动，我可以在后面不断更新。</p><p>有了服务器以后就是敲代码了。</p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/20190806100242.png" alt="大爷，咋又是你啊"></p><h2 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h2><p>服务端我这里使用的是Nodejs作为后端语言，使用express+socket.io作为技术支持，具体的代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>).createServer(app)</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http);</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/dist'</span>))</span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>); </span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type, Content-Length, Authorization, Accept, X-Requested-With'</span>);</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT, POST, GET, DELETE, OPTIONS'</span>);</span><br><span class="line">  <span class="comment">// res.send(`&lt;h1&gt;Hello World!!!&lt;/h1&gt;`)</span></span><br><span class="line">  res.send(__dirname + <span class="string">'/dist/index.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userList = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> userCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> messageList = []</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">"connection"</span>, socket =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">"login"</span>, data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;data.username&#125;</span> 登录`</span>);</span><br><span class="line">    socket.uid = data.uid</span><br><span class="line">    userList[data.uid] = data.username</span><br><span class="line">    userCount++</span><br><span class="line"></span><br><span class="line">    io.emit(<span class="string">'users'</span>, &#123;</span><br><span class="line">      userCount,</span><br><span class="line">      userList</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发给自己</span></span><br><span class="line">    socket.emit(<span class="string">"receive_message"</span>, messageList)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  socket.on(<span class="string">"disconnect"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !socket.uid ) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> user = &#123;</span><br><span class="line">      uid: socket.uid,</span><br><span class="line">      username: userList[socket.uid]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> userList[socket.uid]</span><br><span class="line">    userCount--</span><br><span class="line">    <span class="comment">// 发送给所有用户 使用 io.emit  </span></span><br><span class="line">    <span class="comment">// 发送给自己 使用 socket.emit</span></span><br><span class="line">    io.emit(<span class="string">'users'</span>, &#123;</span><br><span class="line">      userCount,</span><br><span class="line">      userList</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user.username&#125;</span> 登出了`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  socket.on(<span class="string">"message"</span>, data =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !data ) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// console.log(`发送信息 -- $&#123;data&#125;`);</span></span><br><span class="line">    messageList.push(&#123;</span><br><span class="line">      username: userList[socket.uid],</span><br><span class="line">      message: data</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>( messageList.length &gt; <span class="number">30</span> )&#123;</span><br><span class="line">      messageList.shift()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送给除了自己以外的其他所有用户</span></span><br><span class="line">    <span class="comment">// socket.broadcast.emit("receive_message", messageList)</span></span><br><span class="line">    io.emit(<span class="string">"receive_message"</span>, messageList)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">http.listen(<span class="number">2000</span>, _ =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'This server is running: http://localhost:2000'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>静态的文件是使用 create-react-app 开发的页面，build之后放到了服务器上面dist目录下面。</p><p>要使用socket.io，首先需要创建socket服务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http);</span><br></pre></td></tr></table></figure></p><p>接下来就是连接服务端与客户端了。服务端如果想要连接到客户端的用户，那么就需要有方法一直监听到客户端用户访问网站的方法。socket.io中就为我们提供了一个 <code>connection</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.on(<span class="string">"connection"</span>, socket =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>connection</code> 之后所有的操作都是写在这个 <strong>connection</strong> 的监听之中。</p><p>上面的 connection 中的代码需要注意的有几点，知道了这几点，那么socket.io对你就不是难事</p><ol><li><code>io.on(&#39;监听事件名字&#39;, () =&gt; {})</code>方法是监听所有的用户。</li><li><code>connection</code>方法中的 <code>socket</code> 值得是当前用户，所以<code>socket.on(&#39;监听事件名字&#39;, () =&gt; {})</code>是监听当前用户的操作。</li><li><code>io.emit(&#39;监听事件名字&#39;, 参数)</code>是发送消息给客户端，此时客户端会有一个监听的事件，监听事件名字服务端需要与客户端相同。</li><li><code>socket.broadcast.emit(&quot;监听事件名字&quot;, 参数)</code> 这个方法可以发送消息给除了自已以外的其他的所有的用户。</li></ol><p>客户端与服务端一样。</p><p>记住以上四点秘诀，玩转socket不是梦。</p><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><p>客户端使用create-react-app写的页面实现，下面贴出逻辑，就不放样式了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">'socket.io-client'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Input, Button, Avatar, message &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">'http://118.24.6.33:2000'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      showLogin: <span class="literal">true</span>,</span><br><span class="line">      users: &#123;</span><br><span class="line">        userCount: <span class="number">0</span>,</span><br><span class="line">        userList: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      messageList: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  login = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> username = <span class="keyword">this</span>.refs.input.input.value.trim()</span><br><span class="line">    <span class="keyword">const</span> &#123; userList &#125; = <span class="keyword">this</span>.state.users</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( username.length )&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> userList) &#123;</span><br><span class="line">        <span class="keyword">if</span>( userList[k] === username )&#123;</span><br><span class="line">          message.info(<span class="string">"聊天室已经有这个用户了，请重新起一个名字"</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">this</span>.uid = <span class="keyword">this</span>.get_uid()</span><br><span class="line">      socket.emit(<span class="string">"login"</span>, &#123;</span><br><span class="line">        username,</span><br><span class="line">        uid: <span class="keyword">this</span>.uid</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        showLogin: <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      message.info(<span class="string">"请输入一个用户名！！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get_uid = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span><span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">89999</span>)&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  send = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.refs.message.input.value</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.message.trim().length === <span class="number">0</span>) &#123;</span><br><span class="line">      message.info(<span class="string">"你还啥子都还没有输入就行发送了嘛"</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span><span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">9999</span>)&#125;</span>`</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      message: <span class="keyword">this</span>.message.trim(),</span><br><span class="line">      uid: <span class="keyword">this</span>.uid,</span><br><span class="line">      id</span><br><span class="line">    &#125;</span><br><span class="line">    socket.emit(<span class="string">'message'</span>, data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ant design 中清空输入的内容</span></span><br><span class="line">    <span class="keyword">this</span>.refs.message.state.value = <span class="string">''</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> <span class="keyword">this</span>.refs.messages.scrollBy(<span class="number">0</span>, <span class="number">999999</span>), <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    socket.on(<span class="string">"users"</span>, data =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">users</span>: data&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">"receive_message"</span>, data =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">messageList</span>: data&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; showLogin, users, messageList &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> &#123; userCount, userList &#125; = users</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (showLogin) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">          &lt;Input placeholder=<span class="string">"输入一个名字撒"</span> allowClear ref=<span class="string">'input'</span> onPressEnter=&#123;<span class="keyword">this</span>.login&#125;/&gt;</span><br><span class="line">          &lt;Button onClick=&#123;<span class="keyword">this</span>.login&#125; className=<span class="string">"login"</span>&gt;登录&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"room"</span>&gt;</span><br><span class="line">          &lt;div className=<span class="string">'inner'</span>&gt;</span><br><span class="line">            &lt;header&gt;欢迎来到踏浪聊天室，当前聊天室共&#123;userCount&#125;人&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div className="content"&gt;</span></span><br><span class="line"><span class="regexp">              &lt;ul className="user-list"&gt;</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                  Object.entries(userList).map(v =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                    return &lt;li</span></span><br><span class="line"><span class="regexp">                      className="user-list-item"</span></span><br><span class="line"><span class="regexp">                      key=&#123;v[0]&#125;</span></span><br><span class="line"><span class="regexp">                    &gt;</span></span><br><span class="line"><span class="regexp">                      &lt;Avatar style=&#123;&#123; color: '#f56a00', backgroundColor: '#fde3cf' &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">                        &#123;v[1].substring(0, 2)&#125;</span></span><br><span class="line"><span class="regexp">                      &lt;/</span>Avatar&gt;</span><br><span class="line">                      &#123;v[<span class="number">1</span>]&#125;</span><br><span class="line">                    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                  &#125;)</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">              &lt;/u</span>l&gt;</span><br><span class="line">              </span><br><span class="line">              &lt;ul className=<span class="string">"message-list"</span> ref=<span class="string">"messages"</span>&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                  messageList.map(<span class="function"><span class="params">v</span> =&gt;</span> &lt;li</span><br><span class="line">                    key=&#123;v.message.id&#125;</span><br><span class="line">                    className=&#123;v.message.uid === <span class="keyword">this</span>.uid ? <span class="string">"message-list-item me"</span> : <span class="string">"message-list-item"</span>&#125;</span><br><span class="line">                  &gt;</span><br><span class="line">                    &#123;v.message.uid === <span class="keyword">this</span>.uid &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">"message-content"</span>&gt;</span>&#123;v.message.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;</span><br><span class="line">                    &lt;Avatar style=&#123;&#123; <span class="attr">color</span>: <span class="string">'#f56a00'</span>, <span class="attr">backgroundColor</span>: <span class="string">'#fde3cf'</span> &#125;&#125;&gt;</span><br><span class="line">                      &#123;v.username &amp;&amp; v.username.substring(<span class="number">0</span>, <span class="number">2</span>)&#125;</span><br><span class="line">                    &lt;<span class="regexp">/Avatar&gt;</span></span><br><span class="line"><span class="regexp">                    &#123;v.message.uid !== this.uid &amp;&amp; &lt;span className="message-content"&gt;&#123;v.message.message&#125;&lt;/</span>span&gt;&#125;</span><br><span class="line">                  &lt;<span class="regexp">/li&gt;)</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">              &lt;/u</span>l&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;footer&gt;</span></span><br><span class="line"><span class="regexp">              &lt;Input</span></span><br><span class="line"><span class="regexp">                placeholder="请输入消息"</span></span><br><span class="line"><span class="regexp">                ref='message'</span></span><br><span class="line"><span class="regexp">                onPressEnter=&#123;this.send&#125;</span></span><br><span class="line"><span class="regexp">              /</span>&gt;</span><br><span class="line">              &lt;Button className=<span class="string">"send"</span> onClick=&#123;<span class="keyword">this</span>.send&#125;&gt;发送&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>footer&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><p>客户端可是使用的socket.io。不过使用的是专门为客户端提供的<code>socket.io-client</code>。客户端首先需要连接到服务器，通过 <code>const socket = io(&#39;http://118.24.6.33:2000&#39;);</code> 就可以创建一个与服务端链接的 socket 请求。</p><p>接下来就是在 <code>componentDidMount</code> 中编写监听事件，同时 <code>socket.on()</code> 实现监听。</p><p>在事件中使用 <code>socket.emit()</code> 实现向后端发送消息。</p><p>整的逻辑的实现就是如此，摸清逻辑，后面的就不难了。</p><p>上面只是使用可socket.io的一些简单的API，关于更多的方法可以前往<a href="https://socket.io/docs/" target="_blank" rel="noopener">socket.io官网</a></p><p>最后，可以前往github查看<a href="https://github.com/tal007/socket_chat" target="_blank" rel="noopener">源码</a></p>]]></content>
    
    <summary type="html">
    
      使用 create-react-app + socket.io 实现即时聊天工具
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="websocket" scheme="https://blog.lyt007.cn/tags/websocket/"/>
    
      <category term="即时通讯" scheme="https://blog.lyt007.cn/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>递归与尾递归</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/%E9%80%92%E5%BD%92%E4%B8%8E%E5%B0%BE%E9%80%92%E5%BD%92.html"/>
    <id>https://blog.lyt007.cn/技术/递归与尾递归.html</id>
    <published>2019-08-01T01:32:34.000Z</published>
    <updated>2020-04-13T03:13:34.972Z</updated>
    
    <content type="html"><![CDATA[<p>在介绍递归与尾递归之前，我们来看看递归的定义：<strong>程序调用自身的编程技巧称为递归（ recursion）</strong></p><p>百度对递归的定义：<a href="https://baike.baidu.com/item/%E9%80%92%E5%BD%92/1740695" target="_blank" rel="noopener">递归</a></p><p>接着，我们再来看看一道题</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编写一个函数fn，接收一个或者多个参数，其中一个参数为n，若 n=<span class="number">0</span> 或者 n=<span class="number">1</span>，函数返回 <span class="number">1</span>， 否则函数返回 <span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+...+(n<span class="number">-1</span>)+n 的总和</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>按照我们一般的思维，很快就能想到使用递归函数来解决这个问题，所以来看看递归是怎么解决的呢</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>( n === <span class="number">0</span> || n === <span class="number">1</span> )&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> n + fn(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 n=5 那么上面的函数运行流程</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span> ==&gt; <span class="number">5</span> + fn(<span class="number">5</span> - <span class="number">1</span>)</span><br><span class="line">n = <span class="number">4</span> ==&gt; <span class="number">5</span> + <span class="number">4</span> + fn(<span class="number">4</span> - <span class="number">1</span>)</span><br><span class="line">n = <span class="number">3</span> ==&gt; <span class="number">5</span> + <span class="number">4</span> + <span class="number">3</span> + fn(<span class="number">3</span> - <span class="number">1</span>)</span><br><span class="line">n = <span class="number">2</span> ==&gt; <span class="number">5</span> + <span class="number">4</span> + <span class="number">3</span> + <span class="number">2</span> + fn(<span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">n = <span class="number">1</span> ==&gt; <span class="number">5</span> + <span class="number">4</span> + <span class="number">3</span> + <span class="number">2</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>即：最后的结果是 <code>5 + 4 + 3 + 2 + 1 = 15</code></p><p>可以看到，一般的递归，每一级递归都需要调用函数，同时这个函数还与其他的表达式运算，那这样的递归每一次都会创建新的栈。</p><p>随着递归深度的增加，创建的栈越来越多，最终造成爆栈</p><p><img src="https://pic-go-1253455210.cos.ap-chengdu.myqcloud.com/blog/boom.jpeg" alt="boom"></p><p>所以，递归虽然可以解决很多问题，但是也需要注意一下使用限制。</p><p>#尾递归<br>如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。</p><p>百度定义：<a href="https://baike.baidu.com/item/%E5%B0%BE%E9%80%92%E5%BD%92/554682?fr=aladdin" target="_blank" rel="noopener">尾递归</a></p><p>尾递归基于函数的尾调用（尾调用：返回一个函数并且调用这个函数）, <code>每一级调用直接返回函数的返回值更新调用栈,而不用创建新的调用栈, 类似迭代的实现, 时间和空间上均优化了一般递归!</code></p><p>同样的问题，使用尾递归的来看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n, total = <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">1</span> || n === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn(n <span class="number">-1</span>, total + n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是 n=5，来看看运行过程</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span> ==&gt; fn(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">n = <span class="number">4</span> ==&gt; fn(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line">n = <span class="number">3</span> ==&gt; fn(<span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">n = <span class="number">2</span> ==&gt; fn(<span class="number">2</span>, <span class="number">13</span>)</span><br><span class="line">n = <span class="number">1</span> ==&gt; fn(<span class="number">1</span>, <span class="number">15</span>)</span><br></pre></td></tr></table></figure><p>上面的运行每一次都是返回的一个单独的函数，没有其他的表达式与这个函数的结果运行，每一级递归的函数调用变成”线性”的形式。</p><p>上面就是关于一般递归与尾递归的说明。但是这里存在一个很大的问题，<strong>那就是JavaScript的 V8引擎 对尾递归的优化做的并不好，上面的代码尾递归还不如一般的递归</strong>。虽然在JavaScript中无法运行，但是其他的语言例如Java，C，C++等，使用尾递归的好处多余一般递归。</p><h2 id="手动优化"><a href="#手动优化" class="headerlink" title="手动优化"></a>手动优化</h2><p>既然我们在JavaScript中无法使用尾递归，使用递归也害怕爆栈，那我们可以自己来一些方法实现相同的效果，例如上面的多个值相加</p><h3 id="方案一：修改函数内部，使用循环"><a href="#方案一：修改函数内部，使用循环" class="headerlink" title="方案一：修改函数内部，使用循环"></a>方案一：修改函数内部，使用循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n 是 正整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n, a=<span class="number">0</span>, b=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    [a, b] = [b, a + b]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法采用了<a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="noopener">ES6中</a>的<a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="noopener">解构赋值</a>。如果你不了解结构复制，可以去看看，如果你了解结构复制，那么上面的你就很容易理解了。</p><p>其实这种优化方法就是支持尾递归运行的这些引擎对相应语言的优化，使用循环优化，只是JavaScript V8 中没有相应的优化。说白了，就是想Java等语言已经有人帮你做了这一步。</p><h3 id="方案二：蹦床函数"><a href="#方案二：蹦床函数" class="headerlink" title="方案二：蹦床函数"></a>方案二：蹦床函数</h3><p>这是上面的尾递归的变形</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尾递归代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n, total = <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">1</span> || n === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn(n <span class="number">-1</span>, total + n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们来求一下 n=3 的时候的值，如果是使用尾递归，那么 <code>n = 3 ==&gt; 6</code></p><p>首先来了解一下什么是蹦床函数，先来看一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n, total = <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">1</span> || n === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn(n <span class="number">-1</span>, total + n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是 n=3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n = 3</span></span><br><span class="line">fn(<span class="number">3</span>) ==&gt; <span class="built_in">Function</span></span><br><span class="line">fn(<span class="number">3</span>)() ==&gt; <span class="built_in">Function</span></span><br><span class="line">fn(<span class="number">3</span>)()() ==&gt; <span class="number">6</span></span><br></pre></td></tr></table></figure><p>从上面可以看到，如果 n 不是3而是一个很大的数字，那么我们就需要调用很多次函数调用来实现。为了简便，我们可以把这种调用形式写成函数，这样的函数就是<strong>蹦床函数</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 蹦床函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">func, n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = func.call(func, n)</span><br><span class="line">  <span class="keyword">while</span> ( <span class="keyword">typeof</span> result === <span class="string">'function'</span> )&#123;</span><br><span class="line">    result = result()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个蹦床函数有两个参数，第一个参数是一个函数，即我们需要实现逻辑的函数，本例中就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n, total = <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">1</span> || n === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn(n <span class="number">-1</span>, total + n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用蹦床函数代码耗时相对较长。</p><p>以上就是关于递归与尾递归的说明以及优化，当然，如果你要更好的方案，欢迎在评论区留言。</p>]]></content>
    
    <summary type="html">
    
      递归与尾递归的使用，应用场景，以及优缺点
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="https://blog.lyt007.cn/tags/JavaScript/"/>
    
      <category term="递归" scheme="https://blog.lyt007.cn/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="尾递归" scheme="https://blog.lyt007.cn/tags/%E5%B0%BE%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>switch...case与if...else执行能力分析</title>
    <link href="https://blog.lyt007.cn/%E6%8A%80%E6%9C%AF/switch-case%E4%B8%8Eif-else%E6%89%A7%E8%A1%8C%E8%83%BD%E5%8A%9B%E5%88%86%E6%9E%90.html"/>
    <id>https://blog.lyt007.cn/技术/switch-case与if-else执行能力分析.html</id>
    <published>2019-07-25T09:01:27.000Z</published>
    <updated>2020-04-13T03:13:34.968Z</updated>
    
    <content type="html"><![CDATA[<p><code>switch...case</code>与<code>if...else</code>作为条件判断语句在程序中用的是非常多的。</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>基本用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch</span></span><br><span class="line"><span class="keyword">switch</span>( 条件表达式 )&#123;</span><br><span class="line">  <span class="keyword">case</span> a:</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> b:</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> c:</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if else</span></span><br><span class="line"><span class="keyword">if</span> ( 条件表达式<span class="number">1</span> ) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( 条件表达式<span class="number">2</span> ) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( 条件表达式 <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了写法上的差异，两者在执行上面也是不同的。使用<code>switch</code>进行判断，执行的时间可能会更短，但是所消耗的空间会更多。</p><p>switch语句根据一个整数索引值进行多重分支，底层采用跳转表这种数据结构。跳转表是一个数组，表项 i 对应代码段的地址，当switch索引值等于表项i时采取对应的程序操作。</p><p>简单可理解为：执行switch时生成一个长度为最大case常量＋1的数组，程序首先判断switch变量是否大于最大case 常量，若大于，则跳到default分支处理；否则取得数组索引号为switch变量值大小，取得数组对应值即为相应case代码块地址，程序接着跳到此地址执行，完成分支的跳转。</p><p>所以，switch语句的执行速度相对于if语句执行速度会更快。但是因为switch会生成一个临时的数组，所以，占用的内存可能会更大。</p><p>对于if语句，则是系统自上而下的按照条件逐个去判断，知道匹配到合适的条件，否则会执行完整个if语句，所以执行的时间可能会很长，速断会更慢。因此，也得出，在编写代码的时候，需要将几率大的条件置于条件判断的最前面。</p><p>但是，switch在对于非常量的情况下面是无能为力的，比如 <code>if(x &gt; 1 &amp;&amp; x &lt; 100)</code> 这样的条件，使用switch是无法处理的，case语句不支持一个判断类型的表达式。但是，if语句就对这个就毫无压力。</p><p>所以，在只是处理常量的时候，推荐使用 switch 语句判断，如果涉及到了表达式，那么推荐使用 if…else 语句进行判断。</p><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=2ijs33h17bi8k" target="_blank" rel="noopener">https://cloud.tencent.com/developer/support-plan?invite_code=2ijs33h17bi8k</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;switch...case&lt;/code&gt;与&lt;code&gt;if...else&lt;/code&gt;作为条件判断语句在程序中用的是非常多的。&lt;/p&gt;
&lt;h1 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; class=&quot;headerlink&quot; title=&quot;对比&quot;&gt;&lt;/a&gt;对比&lt;
      
    
    </summary>
    
      <category term="技术" scheme="https://blog.lyt007.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
